<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECSharp</name>
    </assembly>
    <members>
        <member name="T:ECSharp.Crypto.AES">
            <summary>
            AES加密
            </summary>
        </member>
        <member name="F:ECSharp.Crypto.AES.bag">
            <summary>
            AES对象
            </summary>
        </member>
        <member name="F:ECSharp.Crypto.AES.Key">
            <summary>
            AES加密密钥
            </summary>
        </member>
        <member name="M:ECSharp.Crypto.AES.#ctor">
            <summary>
            新建一个Aes加密
            </summary>
        </member>
        <member name="M:ECSharp.Crypto.AES.SetKey(System.String)">
            <summary>
            设置密钥
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ECSharp.Crypto.AES.GetKey">
            <summary>
            获取密钥
            <para>如果没有则自动创建一个密钥返回</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Crypto.AES.Encrypt(System.Byte[])">
            <summary>
             AES 加密
            </summary>
            <param name="encryptArray">明文（待加密）</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Crypto.AES.Decrypt(System.Byte[])">
            <summary>
             AES 解密
            </summary>
            <param name="decryptArray">密文（待解密）</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Crypto.MD5">
            <summary>
            md5工具
            </summary>
        </member>
        <member name="M:ECSharp.Crypto.MD5.Encrypt(System.String)">
            <summary>
            加密（32位小写）
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Crypto.MD5.Encrypt(System.Byte[])">
            <summary>
            加密（32位小写）
            </summary>
            <param name="data">字节数据</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Crypto.RSA">
            <summary>
            RSA加密
            </summary>
        </member>
        <member name="F:ECSharp.Crypto.RSA.rsa">
            <summary>
            RSA对象
            </summary>
        </member>
        <member name="P:ECSharp.Crypto.RSA.PublicKey">
            <summary>
            RSA加密公钥
            </summary>
        </member>
        <member name="P:ECSharp.Crypto.RSA.PrivateKey">
            <summary>
            RSA加密私钥
            </summary>
        </member>
        <member name="M:ECSharp.Crypto.RSA.#ctor">
            <summary>
            新建一个Rsa加密
            </summary>
        </member>
        <member name="M:ECSharp.Crypto.RSA.#ctor(System.String)">
            <summary>
            新建一个Rsa加密
            </summary>
        </member>
        <member name="M:ECSharp.Crypto.RSA.Encrypt(System.Byte[])">
            <summary>
            RSA公钥文件加密纯文本。
            </summary>
            <param name="encryptArray">要加密的文本</param>
            <returns>表示加密数据的64位编码字符串.</returns>
        </member>
        <member name="M:ECSharp.Crypto.RSA.Decrypt(System.Byte[])">
            <summary>
            RSA解密
            </summary>
            <param name="decryptArray">加密的密文</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Crypto.RSA.SignData(System.Byte[])">
            <summary>
            RSA公钥文件签名纯文本。
            </summary>
            <param name="strArray">要签名的文本</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Crypto.RSA.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            RSA验签
            </summary>
            <param name="strArray">要签名的密文</param>
            <param name="signArray">签名</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Database.CommandResult">
            <summary>
            SQL语句执行对象结果
            </summary>
        </member>
        <member name="P:ECSharp.Database.CommandResult.EffectNum">
            <summary>
            单表执行影响行数
            <para>此值大于等于0的情况才代表执行成功，大于0的情况表示对数据有记录或影响</para>
            </summary>
        </member>
        <member name="P:ECSharp.Database.CommandResult.Rows">
            <summary>
            执行数据合集
            <para>同名，简化名称，后期弃用 Collection 命名</para>
            </summary>
        </member>
        <member name="P:ECSharp.Database.CommandResult.Tables">
            <summary>
            数据表合集
            </summary>
        </member>
        <member name="P:ECSharp.Database.CommandResult.DataSet">
            <summary>
            数据总合集
            </summary>
        </member>
        <member name="T:ECSharp.Database.IDbHelper">
            <summary>
            数据助手接口
            </summary>
        </member>
        <member name="M:ECSharp.Database.IDbHelper.CheckConnected">
            <summary>
            检查是否连接
            </summary>
            <returns>成功连接返回true</returns>
        </member>
        <member name="M:ECSharp.Database.IDbHelper.GetConnectionString">
            <summary>
            获取数据库连接地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.IDbHelper.CommandSQL(System.String,System.Object[])">
            <summary>
            执行查询SQL语句
            <para>SELECT适用和部分需要更新返回的SQL</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回成功与否</returns>
        </member>
        <member name="M:ECSharp.Database.IDbHelper.ExecuteSQL(System.String,System.Object[])">
            <summary>
            执行修改SQL语句
            <para>非SELECT适用，只需要影响行数</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回影响条数</returns>
        </member>
        <member name="M:ECSharp.Database.IDbHelper.PushSQL(System.String,System.Object[])">
            <summary>
            压入SQL队列，等待统一顺序执行【异步】
            <para>此操作适合非查询操作SQL,且对数据实时更新无要求的情况下方可使用</para>
            <para>脱离主线程由其他线程处理数据</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
        </member>
        <member name="T:ECSharp.Database.Linq.BaseConfigItem">
            <summary>
            基础配置加载器单个配置
            <para>DataTable类型继承DataTableConfig</para>
            <para>Json类型继承JsonConfig</para>
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.BaseConfigItem.PrimaryKey">
            <summary>
            主键 内部变量
            <para>对某个字段值进行绑定</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetESPrimaryKey(System.Data.DataRow)">
            <summary>
            设置主键
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetESConfig(System.Data.DataRow)">
            <summary>
            设置配置
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetESPrimaryKey(Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置主键
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetESConfig(Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置配置
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetPrimaryKey(System.Data.DataRow)">
            <summary>
            设置主键
            <para>此函数直接返回主键对象进行绑定</para>
            </summary>
            <param name="row">单个配置数据记录</param>
            <returns>返回主键对象</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetConfig(System.Data.DataRow)">
            <summary>
            设置配置
            <para>对需要的配置进行绑定对象</para>
            </summary>
            <param name="row">单个配置数据记录</param>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetPrimaryKey(Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置主键
            <para>此函数直接返回主键对象进行绑定</para>
            </summary>
            <param name="token">单个配置数据记录</param>
            <returns>返回主键对象</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.BaseConfigItem.SetConfig(Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置配置
            <para>对需要的配置进行绑定对象</para>
            </summary>
            <param name="token">单个配置数据记录</param>
        </member>
        <member name="T:ECSharp.Database.Linq.ConfigLoader`1">
            <summary>
            基础配置加载器
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.ConfigLoader`1.Configs">
            <summary>
            配置集合
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.ConfigLoader`1.#ctor(ECSharp.Database.IDbHelper,System.String)">
            <summary>
            加载器构造函数
            <para>此操作是利用sql查询到结果然后进行绑定</para>
            </summary>
            <param name="dBHelper">数据库连接对象</param>
            <param name="sql">需要查询的语句</param>
        </member>
        <member name="M:ECSharp.Database.Linq.ConfigLoader`1.#ctor(System.String)">
            <summary>
            加载器构造函数
            <para>此操作是利用json数据然后进行绑定</para>
            </summary>
            <param name="jsonFileName">json文件路径与名称</param>
        </member>
        <member name="M:ECSharp.Database.Linq.ConfigLoader`1.Find(System.Object)">
            <summary>
            查找主键所对应的值
            </summary>
            <param name="value">对象值</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.ConfigLoader`1.TryFind(System.Object,`0@)">
            <summary>
            查找主键所对应的值
            </summary>
            <param name="value">对象值</param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.ConfigLoader`1.Reload">
            <summary>
            重新读取配置
            </summary>
        </member>
        <member name="T:ECSharp.Database.Linq.DataEntity`1">
            <summary>
            数据实体
            <para>此类为了解决手动频繁装/卸箱操作设计</para>
            <para>DataAgentRow可以直接得到object，但是每次都需要强转值才行</para>
            <para>使用此类可以一次成型</para>
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntity`1.Name">
            <summary>
            对象名字
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntity`1.#ctor(System.String,ECSharp.Database.Linq.DataEntityRow)">
            <summary>
            通过名字和数据记录得到一个数据对象
            </summary>
            <param name="name">数据记录中数据对象的名字</param>
            <param name="p">数据记录对象 弱对象</param>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntity`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:ECSharp.Database.Linq.DataEntityRow">
            <summary>
            数据实体记录[线程安全]
            <para>数据不进行任何读写操作一定时间[默认300s有效]后，下一次读取必定重新读取数据库最新数据</para>
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRow.Item(System.String)">
            <summary>
            获取数据对象数据
            <para>这个可以直接获得未转类型的对象</para>
            <para>但是更加推荐使用 GetObject 来获取</para>
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRow.GetObject``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">基础引用类型</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRow.Count">
            <summary>
            获取字段数量
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRow.PrimaryKeyValue">
            <summary>
            获取主键值
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRow.ReloadDB">
            <summary>
            重读数据库
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRow.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Database.Linq.DataEntityRows">
            <summary>
            Sqlserver数据缓存实体助理数据组[线程安全]
            <para>是一个集成化数据高速操作（查询，更新）的助手对象</para>
            <para>使用此类可以更加有效的进行数据库数据的常规操作。</para>
            <para>此类固定同步数据库周期为：1秒</para>
            <para>数据助理产生的对象</para>
            <para>用于托管数据操作的代理类</para>
            <para>如果有一条数据不进行任何读写操作一定时间[默认300s有效]后，下一次操作必定重新读取数据库最新数据</para>
            </summary>
        </member>
        <member name="F:ECSharp.Database.Linq.DataEntityRows.DBHelper">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRows.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRows.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRows.FieldNames">
            <summary>
            查询的字段名
            </summary>
        </member>
        <member name="F:ECSharp.Database.Linq.DataEntityRows.rows">
            <summary>
            记录字典
            </summary>
        </member>
        <member name="F:ECSharp.Database.Linq.DataEntityRows.realPeriod">
            <summary>
            实际周期
            </summary>
        </member>
        <member name="F:ECSharp.Database.Linq.DataEntityRows.period">
            <summary>
            当前周期记录
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.Load(ECSharp.Database.IDbHelper,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            读取数据对
            </summary>
            <param name="dBHelper">数据库链接对象</param>
            <param name="primaryKey">主键名，用于更新和寻找唯一依据字段</param>
            <param name="tableName">SQL表名</param>
            <param name="whereCondition">SQL条件判断条件【Where语句后的内容 包括排序等】</param>
            <param name="fieldNames">SQL字段名【默认为：*】</param>
            <param name="topNum">SQL取值数量【默认为：-1 无限】</param>
            <param name="isNoLock">是否不锁Sql，默认锁表</param>
            <returns></returns>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRows.Item(System.Object)">
            <summary>
            获取数据对象数据
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="P:ECSharp.Database.Linq.DataEntityRows.Length">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.#ctor(ECSharp.Database.IDbHelper,System.Data.DataRowCollection,System.String,System.String,System.String)">
            <summary>
            命名空间构造函数
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.SetSyncPeriod(System.Int32)">
            <summary>
            设置缓存同步周期
            </summary>
            <param name="second">同步周期，单位s【小于等于0都为1s】</param>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.CommitDB">
            <summary>
            提交至数据库
            <para>将所有缓存数据立刻写入数据库</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.SetExpiredTime(System.Int32)">
            <summary>
            设置数据过期时间，过期后会从数据库中重新拉取
            </summary>
            <param name="sec">过期时间，单位s【小于等于0都为1s】</param>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.UpdateDBHandle(System.Int32)">
            <summary>
            更新句柄
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.Update(System.Int32)">
            <summary>
            更新句柄【不需要操作】
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.Database.Linq.DataEntityRows.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Database.Linq.DataTableConfig">
            <summary>
            DataTable类型的配置基类
            <para>继承这个类，并且自定义数据表中各个字段，然后通过SetConfig进行绑定</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.DataTableConfig.SetConfig(System.Data.DataRow)">
            <summary>
            设置主键
            <para>此函数直接返回主键对象进行绑定</para>
            </summary>
            <param name="row">单个配置数据记录</param>
            <returns>返回主键对象</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.DataTableConfig.SetPrimaryKey(System.Data.DataRow)">
            <summary>
            设置配置
            <para>对需要的配置进行绑定对象</para>
            </summary>
            <param name="row">单个配置数据记录</param>
        </member>
        <member name="M:ECSharp.Database.Linq.DataTableConfig.SetConfig(Newtonsoft.Json.Linq.JToken)">
            <summary>
            当前抽象不使用
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:ECSharp.Database.Linq.DataTableConfig.SetPrimaryKey(Newtonsoft.Json.Linq.JToken)">
            <summary>
            当前抽象不使用
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Database.Linq.JsonConfig">
            <summary>
            Json类型的配置基类
            <para>继承这个类，并且自定义数据表中各个字段，然后通过SetConfig进行绑定</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.JsonConfig.SetConfig(System.Data.DataRow)">
            <summary>
            当前抽象不使用
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:ECSharp.Database.Linq.JsonConfig.SetPrimaryKey(System.Data.DataRow)">
            <summary>
            当前抽象不使用
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.JsonConfig.SetConfig(Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置主键
            <para>此函数直接返回主键对象进行绑定</para>
            </summary>
            <param name="token">单个配置数据记录</param>
            <returns>返回主键对象</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.JsonConfig.SetPrimaryKey(Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置配置
            <para>对需要的配置进行绑定对象</para>
            </summary>
            <param name="token">单个配置数据记录</param>
        </member>
        <member name="T:ECSharp.Database.Linq.NoSqlStorage`2">
            <summary>
            非关系型存储类
            <para>此类设计灵感源于非关系型数据库中基础原理</para>
            <para>使用起来只需要知道数据库中取出值和筛选条件即可类似使用字典方式来实现高速访问改变以及同步持久化</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.#ctor(ECSharp.Database.IDbHelper,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            创建一个非关系型数据存储类
            </summary>
            <param name="dBHelper">对应的数据对象</param>
            <param name="keyName">数据所对应数据库中的key名</param>
            <param name="valueName">数据所对应数据库中的value名</param>
            <param name="tableName">数据所对应数据库的表名</param>
            <param name="syncPeriod">同步周期 用于控制写入到持久化数据库的时间 单位 毫秒 默认 1000ms</param>
            <param name="condition">数据查询的其他条件 如不需要则默认值即可，注意此处不需要再次写入key名所对应的条件了</param>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.ContainsKey(`0)">
            <summary>
            是否包含键
            </summary>
            <param name="key">键</param>
            <returns>存在为真，否则为假</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.TryGetValue(`0,`1@)">
            <summary>
            获取值
            </summary>
            <param name="key">key值</param>
            <param name="value">获取到的value值 失败为默认值</param>
            <returns>成功状态</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.TryAdd(`0,`1)">
            <summary>
            增加新的数据
            <para>注意使用此函数 请确保该记录不受其他约束条件影响 否则可能会在持久化存储中插入失败</para>
            </summary>
            <param name="key">key值</param>
            <param name="value">value值</param>
            <returns>如果已存在则返回 false</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.SetValue(`0,`1)">
            <summary>
            设置值
            </summary>
            <param name="key">key值</param>
            <param name="value">需要写入的value</param>
            <returns>成功状态</returns>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.DeleteKey(`0)">
            <summary>
            删除键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.Flush">
            <summary>
            立即更新数据库
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.Clear">
            <summary>
            清空所有数据
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ECSharp.Database.Linq.NoSqlStorage`2.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Database.Linq.SqlBuilder">
            <summary>
            SQL语句构建器
            <para>适合简单的语句构建</para>
            <para>可以帮助开发者减少拼写sql语句带来的不便</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.#ctor(ECSharp.Database.IDbHelper)">
            <summary>
            构建函数
            <para>需要传入一个非空数据库助手实例对象</para>
            </summary>
            <param name="dBHelper">数据库助手实例</param>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Create(ECSharp.Database.IDbHelper)">
            <summary>
            创建一个构造器
            <para>需要传入一个非空数据库助手实例对象</para>
            </summary>
            <param name="dBHelper">数据库助手实例</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Top(System.Int32)">
            <summary>
            顶部数量
            </summary>
            <param name="topCount"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Fields(System.String[])">
            <summary>
            字段
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Values(System.Object[])">
            <summary>
            值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Table(System.String)">
            <summary>
            表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Where(System.String)">
            <summary>
            条件
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Select(System.Boolean)">
            <summary>
            查询
            </summary>
            <param name="isLock">是否锁（NOLOCK) 默认有锁</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Insert">
            <summary>
            插入
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Update">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Linq.SqlBuilder.Delete">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Database.MySQL.IMySqlDbHelper">
            <summary>
            MySql数据库助手异常捕获
            </summary>
        </member>
        <member name="M:ECSharp.Database.MySQL.IMySqlDbHelper.CheckConnectedException(ECSharp.Database.MySQL.MySqlDbHelper,System.Exception)">
            <summary>
            检测连接状态异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:ECSharp.Database.MySQL.IMySqlDbHelper.CommandSQLException(ECSharp.Database.MySQL.MySqlDbHelper,System.String,System.Exception)">
            <summary>
            执行SQL异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="sql">sql语句</param>
            <param name="exception">异常</param>
        </member>
        <member name="T:ECSharp.Database.MySQL.MySqlDbHelper">
            <summary>
            MySQL数据库访问助手
            <para>详情参考：https://mysqlconnector.net/ </para>
            <para>数据库异常可以通过 异常监听来获取</para>
            </summary>
        </member>
        <member name="F:ECSharp.Database.MySQL.MySqlDbHelper.builder">
            <summary>
            数据连接参数构造器
            </summary>
        </member>
        <member name="F:ECSharp.Database.MySQL.MySqlDbHelper.SQLQueue">
            <summary>
            sql队列用于缓存通过压入队列执行的sql对象
            </summary>
        </member>
        <member name="F:ECSharp.Database.MySQL.MySqlDbHelper.listener">
            <summary>
            数据库异常监听
            </summary>
        </member>
        <member name="P:ECSharp.Database.MySQL.MySqlDbHelper.Now">
            <summary>
            获取数据库时间
            <para>如果数据库异常导致查询失败，则默认返回DateTime.Now</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.#ctor(System.String,System.String,System.String,System.UInt32,System.String,System.UInt32,System.UInt32,System.String)">
            <summary>
            MySQL助手构造函数
            <para>详情参考：https://mysqlconnector.net/ </para>
            <para>存在参数不需要再次在额外配置中设置</para>
            </summary>
            <param name="address">数据库地址</param>
            <param name="username">数据库账号</param>
            <param name="password">数据库密码</param>
            <param name="port">数据库端口 默认端口为3306</param>
            <param name="databaseName">数据库名称，默认为空</param>
            <param name="minPoolSize">数据库池连接最小值，默认为0</param>
            <param name="maxPoolSize">数据库池连接最大值，默认为100</param>
            <param name="extraConfig">数据库额外配置</param>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.#ctor(System.String)">
            <summary>
            MySQL助手构造函数
            <para>详情参考：https://mysqlconnector.net/ </para>
            </summary>
            <param name="connectionString">连接配置</param>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.#ctor(MySqlConnector.MySqlConnectionStringBuilder)">
            <summary>
            MySQL助手构造函数
            <para>详情参考：https://mysqlconnector.net/ </para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.SetExceptionListener(ECSharp.Database.MySQL.IMySqlDbHelper)">
            <summary>
            设置异常监听
            </summary>
            <param name="listener">异常监听器</param>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.CheckConnected">
            <summary>
            检查是否连接
            </summary>
            <returns>成功连接返回true</returns>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.GetConnectionString">
            <summary>
            获取数据库连接地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.CommandSQL(System.String,System.Object[])">
            <summary>
            执行查询SQL语句
            <para>SELECT适用和部分需要更新返回的SQL</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回成功与否</returns>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.ExecuteSQL(System.String,System.Object[])">
            <summary>
            执行修改SQL语句
            <para>非SELECT适用，只需要影响行数</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回影响条数</returns>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.PushSQL(System.String,System.Object[])">
            <summary>
            压入SQL队列，等待统一顺序执行【异步】
            <para>此操作适合非查询操作SQL,且对数据实时更新无要求的情况下方可使用</para>
            <para>脱离主线程由其他线程处理数据</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
        </member>
        <member name="F:ECSharp.Database.MySQL.MySqlDbHelper.periodUpdate">
            <summary>
            同步时间周期记录
            </summary>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.Update(System.Int32)">
            <summary>
            通过时间流来更新通过队列执行的SQL
            <para>固定周期为 1s</para>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.Database.MySQL.MySqlDbHelper.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Database.Redis.IRedisEvent">
            <summary>
            redis 事件监听器
            </summary>
        </member>
        <member name="M:ECSharp.Database.Redis.IRedisEvent.OnConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.IRedisEvent.OnErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            发生错误时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.IRedisEvent.OnConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重新建立连接之前的错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.IRedisEvent.OnConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败 ， 如果重新连接成功你将不会收到这个通知
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.IRedisEvent.OnHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            更改集群
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.IRedisEvent.OnInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            redis类库错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ECSharp.Database.Redis.RedisHelper">
            <summary>
            Redis内存缓存数据库助手
            <para>不可继承</para>
            </summary>
        </member>
        <member name="F:ECSharp.Database.Redis.RedisHelper.multiplexer">
            <summary>
            redis 多路调制器
            </summary>
        </member>
        <member name="P:ECSharp.Database.Redis.RedisHelper.PrefixKey">
            <summary>
            前缀键
            </summary>
        </member>
        <member name="P:ECSharp.Database.Redis.RedisHelper.Now">
            <summary>
            获取数据库时间
            <para>如果数据库异常导致查询失败，则默认返回DateTime.Now</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="readWriteHosts">redis 连接地址 ip:port 也可根据需要追加一些配置</param>
            <param name="dbIndex">数据库索引, 默认 索引位为0</param>
            <param name="prefixKey">前缀键</param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="address">redis 连接地址 ip:port</param>
            <param name="password">redis 连接密码</param>
            <param name="dbIndex">数据库索引, 默认 索引位为0</param>
            <param name="prefixKey">前缀键</param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.AddEventListener(ECSharp.Database.Redis.IRedisEvent)">
            <summary>
            增加事件监听
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSet(System.String,System.String)">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSet(System.String,System.String,System.TimeSpan)">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSet(System.String,System.String,System.Double)">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expirySecond">过期时间 单位秒</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSet(System.String,System.String,System.DateTime)">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiryTime">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Set``1(System.String,``0)">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Redis Key</param>
            <param name="obj">保存的值</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Redis Key</param>
            <param name="obj">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Set``1(System.String,``0,System.Double)">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Redis Key</param>
            <param name="obj">保存的值</param>
            <param name="expirySecond">过期时间 单位秒</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Set``1(System.String,``0,System.DateTime)">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Redis Key</param>
            <param name="obj">保存的值</param>
            <param name="expiryTime">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringGet(System.String,System.String)">
            <summary>
            获取单个key的值，如果没有则写入并返回默认值
            </summary>
            <param name="key">Redis Key</param>
            <param name="defaultValue">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringGet(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Get``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Get``1(System.String,``0)">
            <summary>
            获取一个key的对象，如果没有则写入并返回默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.GetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SortedSetLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅  订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅  发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅  取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.UnsubscribeAll">
            <summary>
            Redis发布订阅  取消全部订阅
            </summary>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.CreateTransaction">
            <summary>
            创建事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.GetDatabase">
            <summary>
            获取数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.GetServer(System.String)">
            <summary>
            获取服务器
            </summary>
            <param name="hostAndPort"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.SetPrefixKey(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="prefixKey"></param>
        </member>
        <member name="M:ECSharp.Database.Redis.RedisHelper.Close(System.Boolean)">
            <summary>
            关闭redis连接
            </summary>
            <param name="allowCommandsToComplete"></param>
        </member>
        <member name="T:ECSharp.Database.SQLServer.ISqlServerDbHelper">
            <summary>
            SQLServer数据库助手异常捕获
            </summary>
        </member>
        <member name="M:ECSharp.Database.SQLServer.ISqlServerDbHelper.CheckConnectedException(ECSharp.Database.SQLServer.SqlServerDbHelper,System.Exception)">
            <summary>
            检测连接状态异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.ISqlServerDbHelper.CommandSQLException(ECSharp.Database.SQLServer.SqlServerDbHelper,System.String,System.Exception)">
            <summary>
            执行SQL异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="sql">sql语句</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.ISqlServerDbHelper.ProcedureException(ECSharp.Database.SQLServer.SqlServerDbHelper,System.String,System.Data.SqlClient.SqlParameter[],System.Exception)">
            <summary>
            存储过程异常
            </summary>
            <param name="helper">数据库助手</param>
            <param name="procedure">存储过程</param>
            <param name="sqlParameters">参数</param>
            <param name="exception">异常</param>
        </member>
        <member name="T:ECSharp.Database.SQLServer.Parameter">
            <summary>
            ES存储过程参数
            </summary>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.Create(System.String,System.Object)">
            <summary>
            SQL过程函数参数 0
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.Create(System.String,System.Object,System.Data.SqlDbType)">
            <summary>
            SQL过程函数参数 1
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <param name="sqlDbType">值类型</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.Create(System.String,System.Object,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            SQL过程函数参数 2
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <param name="sqlDbType">值类型</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.Create(System.String,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            SQL过程函数参数 3
            </summary>
            <param name="parameterName">参数名</param>
            <param name="sqlDbType">值类型</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.Create(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            SQL过程函数参数 4
            </summary>
            <param name="parameterName">参数名</param>
            <param name="sqlDbType">值类型</param>
            <param name="size">值预设大小</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.Create(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            SQL过程函数参数 5
            </summary>
            <param name="parameterName">参数名</param>
            <param name="value">值</param>
            <param name="sqlDbType">值类型</param>
            <param name="size">值预设大小</param>
            <param name="direction">方向</param>
            <returns>返回一个参数对象</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.ToParameter(System.String,System.Object)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.ToParameter(System.String,System.Object,System.Data.SqlDbType)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.ToParameter(System.String,System.Object,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.ToParameter(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="sqlDbType"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.Parameter.ToParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            转换为SQL Parameter对象
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="sqlDbType"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Database.SQLServer.ProcedureCmd">
            <summary>
            存储过程指令
            </summary>
        </member>
        <member name="F:ECSharp.Database.SQLServer.ProcedureCmd.procedure">
            <summary>
            存储过程名
            </summary>
        </member>
        <member name="F:ECSharp.Database.SQLServer.ProcedureCmd.sqlParameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:ECSharp.Database.SQLServer.ProcedureResult">
            <summary>
            存储过程结果集
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.ProcedureResult.ReturnValue">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.ProcedureResult.Procedure">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.ProcedureResult.SqlParameters">
            <summary>
            执行数据输出参数
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.ProcedureResult.Tables">
            <summary>
            执行数据合集
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.ProcedureResult.FirstRows">
            <summary>
            首个表记录
            <para>如果过程返回存在一个或多个表结果，此处为第一个表的结果，否则为空</para>
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.ProcedureResult.IsCompleted">
            <summary>
            是否已完成
            <para>为True代表存储过程完整执行成功，False表示有异常</para>
            </summary>
        </member>
        <member name="T:ECSharp.Database.SQLServer.SqlServerDbHelper">
            <summary>
            SQLServer数据库访问助手
            <para>数据库异常可以通过 异常监听来获取</para>
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring/ </para>
            </summary>
        </member>
        <member name="F:ECSharp.Database.SQLServer.SqlServerDbHelper.builder">
            <summary>
            数据连接参数构造器
            </summary>
        </member>
        <member name="F:ECSharp.Database.SQLServer.SqlServerDbHelper.SQLQueue">
            <summary>
            sql队列用于缓存通过压入队列执行的sql对象
            </summary>
        </member>
        <member name="F:ECSharp.Database.SQLServer.SqlServerDbHelper.listener">
            <summary>
            数据库异常监听
            </summary>
        </member>
        <member name="P:ECSharp.Database.SQLServer.SqlServerDbHelper.Now">
            <summary>
            获取数据库时间
            <para>如果数据库异常导致查询失败，则默认返回DateTime.Now</para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            SqlServer助手构造函数
            <para>存在参数不需要再次在额外配置中设置</para>
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring/ </para>
            </summary>
            <param name="address">数据库地址，如果非默认端口需要带端口号，注意地址与端口号是以逗号分隔的</param>
            <param name="username">数据库账号</param>
            <param name="password">数据库密码</param>
            <param name="databaseName">数据库名称，默认为空</param>
            <param name="minPoolSize">数据库池连接最小值，默认为0</param>
            <param name="maxPoolSize">数据库池连接最大值，默认为100</param>
            <param name="extraConfig">数据库额外配置</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.#ctor(System.String)">
            <summary>
            SqlServer助手构造函数
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring/ </para>
            </summary>
            <param name="connectionString">连接配置</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.#ctor(System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            SqlServer助手构造函数
            <para>详情参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring/ </para>
            </summary>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.SetExceptionListener(ECSharp.Database.SQLServer.ISqlServerDbHelper)">
            <summary>
            设置异常监听
            </summary>
            <param name="listener">异常监听器</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.CheckConnected">
            <summary>
            检查是否连接
            </summary>
            <returns>成功连接返回true</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.GetConnectionString">
            <summary>
            获取数据库连接地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.Procedure(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程 1
            <para>返回值默认为整型，长度为4</para>
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>返回 ProcedureResult 失败为null</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.Procedure(System.String,System.Data.SqlDbType,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程 2
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="retvalueDbType">返回值类型</param>
            <param name="retvalueSize">返回值大小</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>返回 ProcedureResult 失败为null</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.ProcedureNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程 3
            <para>不需要返回任何数据</para>
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>影响数量 -1表示异常</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.CommandSQL(System.String,System.Object[])">
            <summary>
            执行查询SQL语句
            <para>SELECT适用和部分需要更新返回的SQL</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回成功与否</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.ExecuteSQL(System.String,System.Object[])">
            <summary>
            执行修改SQL语句
            <para>非SELECT适用，只需要影响行数</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
            <returns>返回影响条数</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.PushSQL(System.String,System.Object[])">
            <summary>
            压入SQL队列，等待统一顺序执行【异步】
            <para>此操作适合非查询操作SQL,且对数据实时更新无要求的情况下方可使用</para>
            <para>脱离主线程由其他线程处理数据</para>
            </summary>
            <param name="sql">执行SQL</param>
            <param name="obj">格式化参数输入【类似string.Format】</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.PushProcedure(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            压入SQL队列，等待统一顺序执行【异步】
            <para>此操作适合非查询操作SQL,且对数据实时更新无要求的情况下方可使用</para>
            <para>脱离主线程由其他线程处理数据</para>
            </summary>
            <param name="procedure">存储过程名称</param>
            <param name="sqlParameters">存储过程参数 建议使用Parameter生成</param>
            <returns>返回成功与否</returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.CreateDataEntityRows(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            创建一个数据实体组
            <para>同 DataAgent 使用相同</para>
            </summary>
            <param name="primaryKey">主键名，用于更新和寻找唯一依据字段</param>
            <param name="tableName">SQL表名</param>
            <param name="whereCondition">SQL条件判断条件【Where语句后的内容 包括排序等】</param>
            <param name="fieldNames">SQL字段名【默认为：*】</param>
            <param name="topNum">SQL取值数量【默认为：-1 无限】</param>
            <param name="isNoLock">是否不锁Sql，默认锁表</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.CreateConfigLoader``1(System.String)">
            <summary>
            创建一个配置加载器
            <para>此操作是利用sql查询到结果然后进行绑定</para>
            </summary>
            <param name="sql">需要查询的语句</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.CreateNoSqlStorage``2(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            创建一个非关系型数据存储类
            </summary>
            <param name="keyName">数据所对应数据库中的key名</param>
            <param name="valueName">数据所对应数据库中的value名</param>
            <param name="tableName">数据所对应数据库的表名</param>
            <param name="syncPeriod">同步周期 用于控制写入到持久化数据库的时间 单位 毫秒 默认 1000ms</param>
            <param name="condition">数据查询的其他条件 如不需要则默认值即可，注意此处不需要再次写入key名所对应的条件了</param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.CreateBuilder">
            <summary>
            创建一个Sql构造器
            <para>需要传入一个非空数据库助手实例对象</para>
            </summary>
        </member>
        <member name="F:ECSharp.Database.SQLServer.SqlServerDbHelper.periodUpdate">
            <summary>
            同步时间周期记录
            </summary>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.Update(System.Int32)">
            <summary>
            通过时间流来更新通过队列执行的SQL
            <para>固定周期为 1s</para>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.Database.SQLServer.SqlServerDbHelper.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC`1">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC`2">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC`3">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC`4">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC_WITH_PARAMETER`1">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC_WITH_PARAMETER`2">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC_WITH_PARAMETER`3">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.COMMAND_FUNC_WITH_PARAMETER`4">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.Command`2">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.Command`2.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.Command`2.Add(`0,ECSharp.COMMAND_FUNC{`1},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`2.Add(`0,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`1},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`2.WaitCall(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`2.WaitCallAsync(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`2.Call(`0)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
        </member>
        <member name="M:ECSharp.Command`2.Call(`0,System.Int32)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
        </member>
        <member name="M:ECSharp.Command`2.Remove(`0)">
            <summary>
            移除指令
            </summary>
            <param name="key">指令名</param>
        </member>
        <member name="M:ECSharp.Command`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Command`3">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.Command`3.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.Command`3.Add(`0,ECSharp.COMMAND_FUNC{`1,`2},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`3.Add(`0,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`1,`2},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`3.WaitCall(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`3.WaitCallAsync(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`3.Call(`0,`2)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="value1">传入值</param>
        </member>
        <member name="M:ECSharp.Command`3.Call(`0,System.Int32,`2)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="value1">传入值</param>
        </member>
        <member name="M:ECSharp.Command`3.Remove(`0)">
            <summary>
            移除指令
            </summary>
            <param name="key">指令名</param>
        </member>
        <member name="M:ECSharp.Command`3.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Command`4">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.Command`4.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.Command`4.Add(`0,ECSharp.COMMAND_FUNC{`1,`2,`3},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`4.Add(`0,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`1,`2,`3},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`4.WaitCall(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`4.WaitCallAsync(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`4.Call(`0,`2,`3)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
        </member>
        <member name="M:ECSharp.Command`4.Call(`0,System.Int32,`2,`3)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
        </member>
        <member name="M:ECSharp.Command`4.Remove(`0)">
            <summary>
            移除指令
            </summary>
            <param name="key">指令名</param>
        </member>
        <member name="M:ECSharp.Command`4.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Command`5">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.Command`5.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.Command`5.Add(`0,ECSharp.COMMAND_FUNC{`1,`2,`3,`4},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`5.Add(`0,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`1,`2,`3,`4},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key">指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Command`5.WaitCall(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`5.WaitCallAsync(`0,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.Command`5.Call(`0,`2,`3,`4)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
            <param name="value3">传入值</param>
        </member>
        <member name="M:ECSharp.Command`5.Call(`0,System.Int32,`2,`3,`4)">
            <summary>
            执行指令
            </summary>
            <param name="key">指令名</param>
            <param name="waitId">等待ID</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
            <param name="value3">传入值</param>
        </member>
        <member name="M:ECSharp.Command`5.Remove(`0)">
            <summary>
            移除指令
            </summary>
            <param name="key">指令名</param>
        </member>
        <member name="M:ECSharp.Command`5.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiCommand`3">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.MultiCommand`3.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.MultiCommand`3.Add(`0,`1,ECSharp.COMMAND_FUNC{`2},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.Add(`0,`1,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`2},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.WaitCall(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.WaitCallAsync(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.Call(`0,`1)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.Call(`0,`1,System.Int32)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.Remove(`0,`1)">
            <summary>
            移除指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
        </member>
        <member name="M:ECSharp.MultiCommand`3.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiCommand`4">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.MultiCommand`4.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.MultiCommand`4.Add(`0,`1,ECSharp.COMMAND_FUNC{`2,`3},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.Add(`0,`1,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`2,`3},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.WaitCall(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.WaitCallAsync(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.Call(`0,`1,`3)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="value1">传入值</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.Call(`0,`1,System.Int32,`3)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="value1">传入值</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.Remove(`0,`1)">
            <summary>
            移除指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
        </member>
        <member name="M:ECSharp.MultiCommand`4.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiCommand`5">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.MultiCommand`5.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.MultiCommand`5.Add(`0,`1,ECSharp.COMMAND_FUNC{`2,`3,`4},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.Add(`0,`1,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`2,`3,`4},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.WaitCall(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.WaitCallAsync(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.Call(`0,`1,`3,`4)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.Call(`0,`1,System.Int32,`3,`4)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.Remove(`0,`1)">
            <summary>
            移除指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
        </member>
        <member name="M:ECSharp.MultiCommand`5.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiCommand`6">
            <summary>
            命令控制
            </summary>
        </member>
        <member name="P:ECSharp.MultiCommand`6.AutoWaitID">
            <summary>
            自增等待ID
            </summary>
        </member>
        <member name="M:ECSharp.MultiCommand`6.Add(`0,`1,ECSharp.COMMAND_FUNC{`2,`3,`4,`5},System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.Add(`0,`1,ECSharp.COMMAND_FUNC_WITH_PARAMETER{`2,`3,`4,`5},System.Object,System.Int32)">
            <summary>
            增加指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.WaitCall(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.WaitCallAsync(`0,`1,System.Int32,System.Object,System.Int32)">
            <summary>
            异步等待执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="parameter">传入参数，此处不为空会覆盖添加处的参数值</param>
            <param name="waitTimeout">超时时间 默认 -1 永不超时</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.Call(`0,`1,`3,`4,`5)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
            <param name="value3">传入值</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.Call(`0,`1,System.Int32,`3,`4,`5)">
            <summary>
            执行指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
            <param name="waitId">等待ID</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
            <param name="value3">传入值</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.Remove(`0,`1)">
            <summary>
            移除指令
            </summary>
            <param name="key1">一级指令名</param>
            <param name="key2">二级指令名</param>
        </member>
        <member name="M:ECSharp.MultiCommand`6.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC`1">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC`2">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC`3">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC_WITH_PARAMETER">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC_WITH_PARAMETER`1">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC_WITH_PARAMETER`2">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.EVENT_FUNC_WITH_PARAMETER`3">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:ECSharp.Event`1">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.Event`1.Add(`0,ECSharp.EVENT_FUNC,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`1.Add(`0,ECSharp.EVENT_FUNC_WITH_PARAMETER,System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`1.Call(`0)">
            <summary>
            执行事件
            </summary>
            <param name="key">事件名</param>
        </member>
        <member name="M:ECSharp.Event`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Event`2">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.Event`2.Add(`0,ECSharp.EVENT_FUNC{`1},System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`2.Add(`0,ECSharp.EVENT_FUNC_WITH_PARAMETER{`1},System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`2.Call(`0,`1)">
            <summary>
            执行事件
            </summary>
            <param name="key">事件名</param>
            <param name="value1">传入值</param>
        </member>
        <member name="M:ECSharp.Event`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Event`3">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.Event`3.Add(`0,ECSharp.EVENT_FUNC{`1,`2},System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`3.Add(`0,ECSharp.EVENT_FUNC_WITH_PARAMETER{`1,`2},System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`3.Call(`0,`1,`2)">
            <summary>
            执行事件
            </summary>
            <param name="key">事件名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
        </member>
        <member name="M:ECSharp.Event`3.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Event`4">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.Event`4.Add(`0,ECSharp.EVENT_FUNC{`1,`2,`3},System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`4.Add(`0,ECSharp.EVENT_FUNC_WITH_PARAMETER{`1,`2,`3},System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key">事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.Event`4.Call(`0,`1,`2,`3)">
            <summary>
            执行事件
            </summary>
            <param name="key">事件名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
            <param name="value3">传入值</param>
        </member>
        <member name="M:ECSharp.Event`4.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiEvent`2">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.MultiEvent`2.Add(`0,`1,ECSharp.EVENT_FUNC,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`2.Add(`0,`1,ECSharp.EVENT_FUNC_WITH_PARAMETER,System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`2.Call(`0,`1)">
            <summary>
            执行事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
        </member>
        <member name="M:ECSharp.MultiEvent`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiEvent`3">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.MultiEvent`3.Add(`0,`1,ECSharp.EVENT_FUNC{`2},System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`3.Add(`0,`1,ECSharp.EVENT_FUNC_WITH_PARAMETER{`2},System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`3.Call(`0,`1,`2)">
            <summary>
            执行事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="value1">传入值</param>
        </member>
        <member name="M:ECSharp.MultiEvent`3.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiEvent`4">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.MultiEvent`4.Add(`0,`1,ECSharp.EVENT_FUNC{`2,`3},System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`4.Add(`0,`1,ECSharp.EVENT_FUNC_WITH_PARAMETER{`2,`3},System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`4.Call(`0,`1,`2,`3)">
            <summary>
            执行事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
        </member>
        <member name="M:ECSharp.MultiEvent`4.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.MultiEvent`5">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:ECSharp.MultiEvent`5.Add(`0,`1,ECSharp.EVENT_FUNC{`2,`3,`4},System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`5.Add(`0,`1,ECSharp.EVENT_FUNC_WITH_PARAMETER{`2,`3,`4},System.Object,System.Int32,System.Int32)">
            <summary>
            增加事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="func">委托函数</param>
            <param name="parameter">传入参数</param>
            <param name="priority">优先级 越高越先执行</param>
            <param name="repeat">重复次数 默认 -1 无限重复</param>
        </member>
        <member name="M:ECSharp.MultiEvent`5.Call(`0,`1,`2,`3,`4)">
            <summary>
            执行事件
            </summary>
            <param name="key1">一级事件名</param>
            <param name="key2">二级事件名</param>
            <param name="value1">传入值</param>
            <param name="value2">传入值</param>
            <param name="value3">传入值</param>
        </member>
        <member name="M:ECSharp.MultiEvent`5.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.AbstractAgent">
            <summary>
            热更新抽象代理
            <para>普通代理类型请使用Agent类继承</para>
            <para>代理对象为抽象类时使用此类进行继承</para>
            <para>不要在代理类使用构造函数，请使用Initialize来初始化一些内容</para>
            <para>本类不可以直接使用self对象，需要使用_self函数获取</para>
            <para>使用抽象类还需要继承IAgent接口才可以使用完整功能</para>
            <para>其它功能参考Agent类</para>
            </summary>
        </member>
        <member name="P:ECSharp.Hotfix.AbstractAgent.IsFirstCreate">
            <summary>
            是否是第一次代理创建标记
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AbstractAgent.__self">
            <summary>
            动态数据对象
            </summary>
        </member>
        <member name="P:ECSharp.Hotfix.AbstractAgent._self">
            <summary>
            获取代理数据动态类型
            <para>一般配合IAgent接口使用</para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AbstractAgent.Initialize">
            <summary>
            初始化函数
            <para>代理创建后会主动调用此函数</para>
            <para>不要对代理使用构造函数</para>
            <para>可以通过 IsFirstCreate 来检测代理是否第一次创建</para>
            <para>需要注意的是此函数不会主动执行父类的 Initialize 函数</para>
            <para>初始化父类函数需要在每个子类 Initialize 函数 首行加入 base.Initialize(); </para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AbstractAgent.InitializeES(System.Boolean)">
            <summary>
            初始化函数 内部调用
            </summary>
            <param name="isFirstCreate"></param>
        </member>
        <member name="T:ECSharp.Hotfix.Agent`1">
            <summary>
            热更新代理
            <para>只有继承这个代理类才能在热更层使用其泛型的变量值</para>
            <para>如果继承AbstractAgent，则需要用IAgent来获取</para>
            <para>继承此类使用数据层变量请用 self 代替 this </para>
            <para>代理类中函数如果存在委托情况，请注意如仅存于非热更层的委托可能存在问题</para>
            <para>此类是代理类，请不要使用代理类来直接声明变量或属性</para>
            <para>当然如果真的有需要，可以使用 AgentDataPivot 类来存储变量实现热更层声明变量</para>
            <para>或者使用特性[CopyAgentValue]来持有代理类的成员变量</para>
            <para>热更层可以继承时间流接口，每次热更重载后时间流重置</para>
            <para>不要在代理类使用构造函数，请使用Initialize来初始化一些内容</para>
            <para>当存在对应关系的代理 AgentData 继承对象时，会在构建代理数据 AgentData 时自动构建此类继承的子类</para>
            <para>当然如果不要自动构建可以在 AgentData 继承类添加 [NotCreateAgent] 特性, 即可手动通过 GetAgent 函数创建</para>
            <para>如果确实需要在热更层新建字段或属性，并且希望可以重载之后值也可以保留，那么可以使用 [CopyAgentValue] 特性</para>
            </summary>
            <typeparam name="T">代理数据类型</typeparam>
        </member>
        <member name="F:ECSharp.Hotfix.Agent`1.___self">
            <summary>
            隐藏代理对象
            </summary>
        </member>
        <member name="P:ECSharp.Hotfix.Agent`1.self">
            <summary>
            代理类对象
            <para>通过此对象可以获取代理数据的对象，相当于this的用法</para>
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.AgentData">
            <summary>
            热更新代理数据
            <para>只有通过继承代理数据的类才能使用热更代理层函数</para>
            <para>此类事代理数据类，代理类的变量或属性需要从此声明来使用</para>
            <para>需要在热更层使用的变量或者属性需要使用 public 访问修饰符</para>
            <para>当存在对应关系的代理 Agent 继承对象时，会在构建代理数据 AgentData 时自动构建 Agent 继承对象</para>
            <para>当然如果不要自动构建可以在 AgentData 继承类添加 [NotCreateAgent] 特性, 即可手动通过 GetAgent 函数创建</para>
            <para>如果确实需要在热更层新建字段或属性，并且希望可以重载之后值也可以保留，那么可以使用 [CopyAgentValue] 特性</para>
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentData._ref">
            <summary>
            代理引用
            </summary>
        </member>
        <member name="P:ECSharp.Hotfix.AgentData.IsFirstCreateAgent">
            <summary>
            是否为第一次创建代理
            <para>用于代理在第一次同时和代理数据创建时不需要处理的内容作为提示</para>
            <para>第一次调用代理构造函数此值为true，之后每次调用都为false</para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentData.#ctor">
            <summary>
            创建代理数据
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentData.#ctor(System.Boolean)">
            <summary>
            创建代理数据
            </summary>
            <param name="isAutoCreate">是否自动创建代理</param>
        </member>
        <member name="M:ECSharp.Hotfix.AgentData.CreateAgent">
            <summary>
            手动创建自动代理
            <para>使用条件需要满足是自动创建代理的代理数据类才能成功创建</para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentData.GetDynamicAgent">
            <summary>
            获取动态类型代理
            <para>此函数主要用于支持数据层能够动态调用热更层函数</para>
            <para>热更层可以用GetAgent泛型来直接获取代理目标对象</para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentData.GetAgent``1">
            <summary>
            获取代理
            </summary>
            <typeparam name="T">当前对象的代理类</typeparam>
        </member>
        <member name="M:ECSharp.Hotfix.AgentData.GetAbstractAgent``1">
            <summary>
            获取抽象代理
            </summary>
            <typeparam name="T">当前对象的抽象代理类</typeparam>
        </member>
        <member name="T:ECSharp.Hotfix.AgentDataPivot">
            <summary>
            热更新代理数据枢纽
            <para>所有代理的最上层数据存储都通过此类来执行存储释放</para>
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentDataPivot.objects">
            <summary>
            引用变量
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentDataPivot.structs">
            <summary>
            值变量
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentDataPivot.AddOrGetObject``1(System.String)">
            <summary>
            增加或获取对象
            <para>自动创建对象</para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentDataPivot.AddOrGetObject``1(System.String,System.Func{``0})">
            <summary>
            增加或获取对象
            <para>手动创建对象，需要完成对象创建的所有过程</para>
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentDataPivot.DeleteObject(System.String)">
            <summary>
            删除对象
            <para>有且删除则返回true</para>
            </summary>
            <param name="key">对象名称</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Hotfix.AgentDataPivot.AddOrGetStruct``1(System.String,``0)">
            <summary>
            增加或获取结构值
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentDataPivot.DeleteStruct(System.String)">
            <summary>
            删除结构值
            <para>有且删除则返回true</para>
            </summary>
            <param name="key">对象名称</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Hotfix.AgentRef">
            <summary>
            热更新代理引用器
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.isCreated">
            <summary>
            代理索引是否被创建
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef._agent">
            <summary>
            代理
            <para>通过代理可以执行关于类的函数</para>
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.type">
            <summary>
            代理数据类型
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.isAutoCreate">
            <summary>
            自动创建
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.isFirstCreateAgent">
            <summary>
            是否为第一次创建代理
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.isCopyValue">
            <summary>
            是否拷贝值
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.agentData">
            <summary>
            代理数据对象
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.m_lock">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.AgentRef.createAgentCount">
            <summary>
            创建代理次数
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentRef.#ctor(System.Type,System.Boolean,ECSharp.Hotfix.AgentData)">
            <summary>
            构建代理索引
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentRef.CreateAsyncAgent">
            <summary>
            异步创建代理
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentRef.CreateAgent``1(ECSharp.Hotfix.AgentData)">
            <summary>
            创建代理
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.AgentRef.CreateAgent">
            <summary>
            创建代理
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.BaseStructValue">
            <summary>
            基础结构体值保存对象
            <para>用于保存和使用结构体类型的数据</para>
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.BaseStructValue._value">
            <summary>
            结构体值
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.HotfixMgr">
            <summary>
            热更新模块管理器
            <para>通过主函数Load来加载Dll模块</para>
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.HotfixMgr.assemblyLoader">
            <summary>
            程序集装载器对象
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.HotfixMgr.agentRefs">
            <summary>
            代理引用包
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.HotfixMgr.tf">
            <summary>
            时间流
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.HotfixMgr.agentTypeMap">
            <summary>
            代理类型字典
            </summary>
        </member>
        <member name="P:ECSharp.Hotfix.HotfixMgr.IsFirstLoad">
            <summary>
            是否为第一次加载
            <para>只有在第一次加载才为true，之后都是false</para>
            <para>第二次调用Load后变化</para>
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.HotfixMgr.loadCount">
            <summary>
            加载次数
            </summary>
        </member>
        <member name="F:ECSharp.Hotfix.HotfixMgr.updateCheck">
            <summary>
            更新检测
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.#cctor">
            <summary>
            创建一个热更管理器
            </summary>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.Load(System.String,System.String,System.String[],System.String)">
            <summary>
            载入热更新模块
            <para>读取不能保证所有情况都是正常的，建议用try-catch捕获异常，以确保未正确替换，还能保持旧环境继续运行</para>
            <para>主入口包含一个静态Main函数 public static void Main(string[] args){}</para>
            </summary>
            <param name="assemblyFileName">程序集文件名(后缀小写或不写且程序集需要在运行根目录下)</param>
            <param name="classFullName">含有 public static void Main(string[] args){} 程序集下热更模块主入口类全称(即命名空间和类名)</param>
            <param name="args">传入热更层字符串数组</param>
            <param name="entryMethodName">入口函数名称，默认不指定为 Main</param>
            <returns>本次加载是否执行，进入执行且完成为true，未执行为false</returns>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.GetVersion">
            <summary>
            获取版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.GetAssemblyVersion">
            <summary>
            获取版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.GetAssembly">
            <summary>
            获取程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.AddAgentRef(ECSharp.Hotfix.AgentRef)">
            <summary>
            增加代理引用
            </summary>
            <param name="agentRef"></param>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.UpdateCheck.Update(System.Int32)">
            <summary>
            更新
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ECSharp.Hotfix.HotfixMgr.UpdateCheck.UpdateEnd">
            <summary>
            更新结束
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.HotfixMgr.AssemblyLoader">
            <summary>
            程序集装载器
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.HotfixMgr.AssemblyLoader.AssemblyProtectContext">
            <summary>
            程序集上下文
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.IAgent`1">
            <summary>
            代理接口
            <para>当使用抽象代理AbstractAgent时候，需要添加此接口来约束代理数据</para>
            </summary>
            <typeparam name="T">当前代理类的代理数据类型</typeparam>
        </member>
        <member name="P:ECSharp.Hotfix.IAgent`1.self">
            <summary>
            self对象
            <para>在抽象代理中想要获取代理数据对象需要使用此函数</para>
            <para>一般情况下函数实现: public [new] T self => _self as T;</para>
            <para>由于抽象继承所以子类需要用new隐藏父类self</para>
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.KeepAgentValueAttribute">
            <summary>
            保持在重载模块后代理值不变
            <para>添加到对应 AgentData 继承类，在自动代理模式下可以开启代理类值通过反射拷贝</para>
            <para>此处使用反射，在对象庞大的类，还是建议不要使用这个特性</para>
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.NotCreateAgentAttribute">
            <summary>
            阻止代理自动化生成
            <para>添加到对应 AgentData 继承类，就会将与之对应的代理转为手动创建</para>
            </summary>
        </member>
        <member name="T:ECSharp.Hotfix.StructValue`1">
            <summary>
            结构体值保存对象
            <para>用于保存和使用结构体类型的数据</para>
            </summary>
        </member>
        <member name="P:ECSharp.Hotfix.StructValue`1.Value">
            <summary>
            结构体值
            </summary>
        </member>
        <member name="T:ECSharp.Linq.Base64Linq">
            <summary>
            拓展方法类
            <para>base64编码\解码构造器</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.Base64Linq.ToBase64(System.String)">
            <summary>
            将正常字符串转化为base64编码字符串
            </summary>
            <param name="str">需要转化的正常字符串</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.Base64Linq.FromBase64(System.String)">
            <summary>
            将base64编码字符串转化为正常字符串
            </summary>
            <param name="str">需要转化的base64字符串</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Linq.ByteLinq">
            <summary>
            拓展方法类
            <para>Byte数组比较</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.ByteLinq.Compare(System.Byte[],System.Byte[])">
            <summary>
            比较字节数组
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <returns>相同返回true 不同返回false</returns>
        </member>
        <member name="M:ECSharp.Linq.ByteLinq.AsString(System.Byte[])">
            <summary>
            转为UTF-8编码的字符串
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Linq.ConcurrentLinq">
            <summary>
            拓展方法类
            <para>Concurrent系列拓展</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.ConcurrentLinq.ClearAll``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            清空 拓展方法提供
            </summary>
            <param name="concurrentQueue"></param>
        </member>
        <member name="M:ECSharp.Linq.ConcurrentLinq.ClearAll``1(System.Collections.Concurrent.ConcurrentStack{``0})">
            <summary>
            清空 拓展方法提供
            </summary>
            <param name="concurrentStack"></param>
        </member>
        <member name="M:ECSharp.Linq.ConcurrentLinq.ClearAll``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>
            清空 拓展方法提供
            </summary>
            <param name="concurrentBag"></param>
        </member>
        <member name="T:ECSharp.Linq.DateTimeLinq">
            <summary>
            拓展方法类
            <para>DateTime拓展</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.ToMilliSecondTicks(System.DateTime)">
            <summary>
            转换为毫秒单位时间戳
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.ToSecondTicks(System.DateTime)">
            <summary>
            转换为秒单位时间戳
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.CompareYear(System.DateTime,System.DateTime)">
            <summary>
            对比[年]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.CompareMonth(System.DateTime,System.DateTime)">
            <summary>
            对比[年月]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.CompareDay(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.CompareHour(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日时]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.CompareMinute(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日时分]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="M:ECSharp.Linq.DateTimeLinq.CompareSecond(System.DateTime,System.DateTime)">
            <summary>
            对比[年月日时分秒]范围的数据
            <para>[等于 0 两个日期相等]</para>
            <para>[大于 0 当前日期大于对比日期]</para>
            <para>[小于 0 当前日期小于对比日期]</para>
            <para>对比值单位秒</para>
            </summary>
            <param name="dateTime"></param>
            <param name="compareDatetime"></param>
            <returns>对比值单位秒</returns>
        </member>
        <member name="T:ECSharp.Linq.JsonLinq">
            <summary>
            拓展方法类
            <para>JSON工具助手 基于Newtonsoft.Json开源框架</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsJObject(System.Byte[])">
            <summary>
            通过json字节流新建Json对象
            <para>此字节流编码：UTF-8</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsJObject(System.String)">
            <summary>
            通过json字符串新建Json对象
            </summary>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsString(Newtonsoft.Json.Linq.JObject)">
            <summary>
            序列化json对象为字符串
            </summary>
            <returns>序列化的字符串</returns>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsBytes(Newtonsoft.Json.Linq.JObject)">
            <summary>
            序列化json对象为字节流
            <para>此字节流编码：UTF-8</para>
            </summary>
            <returns>序列化的字节流</returns>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsJArray(System.Byte[])">
            <summary>
            通过json字节流新建Json数组对象
            <para>此字节流编码：UTF-8</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsJArray(System.String)">
            <summary>
            通过json字符串新建Json数组对象
            </summary>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsString(Newtonsoft.Json.Linq.JArray)">
            <summary>
            序列化json数组对象为字符串
            </summary>
            <returns>序列化的字符串</returns>
        </member>
        <member name="M:ECSharp.Linq.JsonLinq.AsBytes(Newtonsoft.Json.Linq.JArray)">
            <summary>
            序列化json数组对象为字节流
            <para>此字节流编码：UTF-8</para>
            </summary>
            <returns>序列化的字节流</returns>
        </member>
        <member name="T:ECSharp.Linq.StringLinq">
            <summary>
            拓展方法类
            <para>字符串转其他类型拓展</para>
            </summary>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsBytes(System.String)">
            <summary>
            转为UTF-8编码的字节数组
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsByte(System.String)">
            <summary>
            转字节
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsInt32(System.String)">
            <summary>
            转32位整型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsInt64(System.String)">
            <summary>
            转64位整型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsFloat(System.String)">
            <summary>
            转单精度浮点型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsDouble(System.String)">
            <summary>
            转双精度浮点型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Linq.StringLinq.AsBool(System.String)">
            <summary>
            转布尔型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Log">
            <summary>
            日志类
            <para>调用此日志类可以应对高速写入日志需求</para>
            <para>日志周期性写入目标文件路径</para>
            <para>配置请参考 LogConfig.cs 类</para>
            </summary>
        </member>
        <member name="M:ECSharp.Log.ReadLine(System.String)">
            <summary>
            输入性 日志
            <para>Reads the next line of characters from the standard input stream.</para>
            </summary>
            <param name="log">日志数据</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Log.Debug(System.String)">
            <summary>
            调试性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Debug(System.Object)">
            <summary>
            调试性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Debug(System.Object[])">
            <summary>
            调试性 日志
            </summary>
            <param name="logs">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Info(System.String)">
            <summary>
            信息性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Info(System.Object)">
            <summary>
            信息性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Info(System.Object[])">
            <summary>
            信息性 日志
            </summary>
            <param name="logs">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Warn(System.String)">
            <summary>
            警告性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Warn(System.Object)">
            <summary>
            警告性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Warn(System.Object[])">
            <summary>
            警告性 日志
            </summary>
            <param name="logs">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Error(System.String)">
            <summary>
            错误性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Error(System.Object)">
            <summary>
            错误性 日志
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Error(System.Object[])">
            <summary>
            错误性 日志
            </summary>
            <param name="logs">日志数据</param>
        </member>
        <member name="M:ECSharp.Log.Exception(System.Exception,System.String)">
            <summary>
            异常 日志
            </summary>
            <param name="ex">异常对象</param>
            <param name="log">日志内容</param>
        </member>
        <member name="M:ECSharp.Log.Exception(System.Exception,System.Object)">
            <summary>
            异常 日志
            </summary>
            <param name="ex">异常对象</param>
            <param name="log">日志内容</param>
        </member>
        <member name="M:ECSharp.Log.Exception(System.Exception,System.Object[])">
            <summary>
            异常 日志
            </summary>
            <param name="ex">异常对象</param>
            <param name="logs">日志内容</param>
        </member>
        <member name="T:ECSharp.LogConfig">
            <summary>
            日志配置
            <para>配置修改建议在第一次调用Log前修改完成，避免出现奇怪的问题</para>
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_CONSOLE_ASYNC_OUTPUT">
            <summary>
            日志控制台异步输出开关
            <para>异步输出采用其它线程处理，调试时可能出现意外，建议调试采用同步输出</para>
            <para>默认关闭</para>
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_CONSOLE_STACK_TRACE_OUTPUT">
            <summary>
            日志控制台堆栈跟踪输出
            <para>开启后控制台中日志将写入堆栈信息</para>
            <para>默认关闭</para>
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_FILE_STACK_TRACE_OUTPUT">
            <summary>
            日志文件堆栈跟踪输出
            <para>开启后日志文件中日志将写入堆栈信息</para>
            <para>默认开启</para>
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.CONSOLE_OUTPUT_LOG_TYPE">
            <summary>
            控制台输出最小日志类型 默认：调试性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FILE_OUTPUT_LOG_TYPE">
            <summary>
            文件输出最小日志类型 默认：信息性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_PERIOD">
            <summary>
            日志写入周期 单位 ms
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_FILE_SUFFIX">
            <summary>
            日志写入文件后缀
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_UNIT_FILE_MAX_SIZE">
            <summary>
            日志单个文件最多大小
            单位 byte 默认 50MB大小
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.LOG_PATH">
            <summary>
            日志根路径
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FOREGROUND_DEBUG_COLOR">
            <summary>
            调试性 日志字体颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FOREGROUND_INFO_COLOR">
            <summary>
            信息性 日志字体颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FOREGROUND_WARN_COLOR">
            <summary>
            警告性 日志字体颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FOREGROUND_ERROR_COLOR">
            <summary>
            错误性 日志字体颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FOREGROUND_EXCEPTION_COLOR">
            <summary>
            异常 日志字体颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.FOREGROUND_INPUT_COLOR">
            <summary>
            输入 日志字体颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.BACKGROUND_INFO_COLOR">
            <summary>
            信息性 日志字体背景颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.BACKGROUND_DEBUG_COLOR">
            <summary>
            调试性 日志字体背景颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.BACKGROUND_WARN_COLOR">
            <summary>
            警告性 日志字体背景颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.BACKGROUND_ERROR_COLOR">
            <summary>
            错误性 日志字体背景颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.BACKGROUND_EXCEPTION_COLOR">
            <summary>
            异常 日志字体背景颜色
            </summary>
        </member>
        <member name="F:ECSharp.LogConfig.BACKGROUND_INPUT_COLOR">
            <summary>
            输入 日志字体背景颜色
            </summary>
        </member>
        <member name="T:ECSharp.LogManager">
            <summary>
            日志管理器
            <para>周期性写入文件</para>
            <para>周期LOG_PERIOD、写入路径LOG_PATH和分文件大小限制LOG_UNIT_FILE_MAX_SIZE可以直接调用静态修改（程序启动时未第一次调用就应修改完成）</para>
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.fileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.logId">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.logIndex">
            <summary>
            日志索引，如果单个时间内日志太大则分开
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.proccessName">
            <summary>
            进程名称
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.timeFlow">
            <summary>
            时间流
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.logWriteUpdate">
            <summary>
            日志写入线程
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.m_lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:ECSharp.LogManager.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ECSharp.LogManager.SystemInfo">
            <summary>
            打印系统环境信息日志
            </summary>
        </member>
        <member name="M:ECSharp.LogManager.WriteLine(ECSharp.LogType,System.String)">
            <summary>
            写入日志
            </summary>
            <param name="type">日志类型</param>
            <param name="log">日志数据</param>
        </member>
        <member name="M:ECSharp.LogManager.FormatLog(ECSharp.LogManager.LogInfo@)">
            <summary>
            格式化日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:ECSharp.LogManager.OutputLog(ECSharp.LogManager.LogInfo@)">
            <summary>
            输出日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:ECSharp.LogManager.LogWriteUpdate">
            <summary>
            日志写入线程
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogWriteUpdate.logInfos">
            <summary>
            日志数据队列
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogWriteUpdate.periodNow">
            <summary>
            周期
            </summary>
        </member>
        <member name="M:ECSharp.LogManager.LogWriteUpdate.Enqueue(ECSharp.LogManager.LogInfo)">
            <summary>
            压入日志队列
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:ECSharp.LogManager.LogWriteUpdate.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.LogManager.LogWriteUpdate.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.LogManager.LogInfo">
            <summary>
            日志信息数据
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogInfo.type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogInfo.time">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogInfo.data">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogInfo.stack">
            <summary>
            堆栈信息
            </summary>
        </member>
        <member name="F:ECSharp.LogManager.LogInfo.log">
            <summary>
            日志字符串
            </summary>
        </member>
        <member name="T:ECSharp.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:ECSharp.LogType.DEBUG">
            <summary>
            调试性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogType.INFO">
            <summary>
            信息性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogType.WARN">
            <summary>
            警告性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogType.ERROR">
            <summary>
            错误性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogType.FATAL">
            <summary>
            致命性日志
            </summary>
        </member>
        <member name="F:ECSharp.LogType.INPUT">
            <summary>
            输入性日志
            </summary>
        </member>
        <member name="T:ECSharp.Network.Http.HttpHeader">
            <summary>
            HTTP消息头
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpHeader.Body">
            <summary>
            消息体
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpHeader.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpHeader.ContentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpHeader.headers">
            <summary>
            头信息字典
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.HttpHeader.GetHeader(System.String)">
            <summary>
            通过字符串获取HTTP头
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpHeader.SetHeader(System.String,System.String)">
            <summary>
            通过字符串设置HTTP头
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="T:ECSharp.Network.Http.HttpMethodType">
            <summary>
            http访问方法类型
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.UNKNOWN">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.GET">
            <summary>
            GET请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.POST">
            <summary>
            POST请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.PUT">
            <summary>
            PUT请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.DELETE">
            <summary>
            DELETE请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.HEAD">
            <summary>
            HEAD请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.CONNECT">
            <summary>
            CONNECT请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.OPTIONS">
            <summary>
            OPTIONS请求
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpMethodType.TRACE">
            <summary>
            TRACE请求
            </summary>
        </member>
        <member name="T:ECSharp.Network.Http.HttpRequest">
            <summary>
            HTTP请求定义
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.GetParams">
            <summary>
            Get参数字典
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.GetValue">
            <summary>
            Get值
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.PostParams">
            <summary>
            Post参数字典
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.PostValue">
            <summary>
            Post值
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.Method">
            <summary>
            HTTP请求方式
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.IsSSL">
            <summary>
            安全连接
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.RawUrl">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpRequest.ProtocolVersion">
            <summary>
            HTTP协议版本
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpRequest.bytes">
            <summary>
            定义缓冲区
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpRequest.tcpClient">
            <summary>
            连接客户端
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.#ctor(System.Net.Sockets.NetworkStream,System.Net.Security.SslStream,System.Net.Sockets.TcpClient)">
            <summary>
            构建http请求对象
            </summary>
            <param name="networkStream"></param>
            <param name="sslStream"></param>
            <param name="tcpClient"></param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.GetTcpClient">
            <summary>
            获取请求对象流
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.GetHeader(ECSharp.Network.Http.RequestHeaders)">
            <summary>
            通过枚举类型获取HTTP头
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.SetHeader(ECSharp.Network.Http.RequestHeaders,System.String)">
            <summary>
            通过枚举设置HTTP头
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.GetRequestData(System.IO.Stream)">
            <summary>
            获取请求数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.GetRequestBody(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取请求体
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.GetRequestHeaders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取请求头
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpRequest.GetRequestParameters(System.String)">
            <summary>
            获取请求参数
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Network.Http.HttpResponse">
            <summary>
            HTTP应答
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpResponse.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:ECSharp.Network.Http.HttpResponse.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpResponse.handler">
            <summary>
            数据流句柄
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpResponse.hasContent">
            <summary>
            是否有数据
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.#ctor(System.IO.Stream)">
            <summary>
            构造一个应答对象
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.Write(System.Byte[],System.Text.Encoding)">
            <summary>
            设置内容
            </summary>
            <param name="content">内容</param>
            <param name="encoding">编码，默认UTF8</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.Write(System.String,System.Text.Encoding)">
            <summary>
            设置内容
            </summary>
            <param name="content">内容</param>
            <param name="encoding">编码，默认UTF8</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.GetResponseStream">
            <summary>
            获取应答数据流
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.GetHeader(ECSharp.Network.Http.ResponseHeaders)">
            <summary>
            通过枚举获取应答头
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.SetHeader(ECSharp.Network.Http.ResponseHeaders,System.String)">
            <summary>
            通过枚举设置应答头
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.BuildHeader">
            <summary>
            构建响应头部
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpResponse.Send">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="T:ECSharp.Network.Http.HttpService">
            <summary>
            HTTP访问服务
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpService.listener">
            <summary>
            Http监听器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpService.httpInvoke">
            <summary>
            HTTP访问回调委托
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.HttpService.certificate">
            <summary>
            安全证书
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.#ctor(System.String,System.Int32,ECSharp.Network.Http.Linq.HttpVisitor,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            构造函数
            <para>创建一个HTTP服务</para>
            </summary>
            <param name="ipAddress">监听ip地址</param>
            <param name="port">监听端口</param>
            <param name="visitor">访问器</param>
            <param name="certificate">安全证书</param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.#ctor(System.String,System.Int32,ECSharp.Network.Http.IHttp,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            构造函数
            <para>创建一个HTTP服务</para>
            </summary>
            <param name="ipAddress">监听ip地址</param>
            <param name="port">监听端口</param>
            <param name="invoke">回调接口[不适用访问器添加]</param>
            <param name="certificate">安全证书</param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.StartServer(System.Int32)">
            <summary>
            开启服务器
            </summary>
            <param name="backlog">并发数量 默认:10</param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.SetHttpInvoke(ECSharp.Network.Http.IHttp)">
            <summary>
            设置HTTP委托
            </summary>
            <param name="invoke">委托接口</param>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.GetTcpListener">
            <summary>
            获取HTTP监听对象
            </summary>
            <returns>监听对象</returns>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.GetContextCallBack(System.IAsyncResult)">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.HttpService.CloseHttpServer">
            <summary>
            关闭HTTP服务器
            </summary>
        </member>
        <member name="T:ECSharp.Network.Http.IHttp">
            <summary>
            超文本访问协议委托回调
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.IHttp.OnRequest(ECSharp.Network.Http.HttpRequest,ECSharp.Network.Http.HttpResponse)">
            <summary>
            访问回调
            </summary>
            <param name="request">HTTP请求</param>
            <param name="response">HTTP应答</param>
        </member>
        <member name="M:ECSharp.Network.Http.IHttp.HttpException(ECSharp.Network.Http.HttpRequest,System.Exception)">
            <summary>
            套接字异常捕获
            </summary>
            <param name="request">HTTP请求</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="T:ECSharp.Network.Http.Linq.HttpRequestHelper">
            <summary>
            简单HTTP请求助手
            <para>对http请求进行简单的访问</para>
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpRequestHelper.Post(System.String,System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">请求数据</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpRequestHelper.Get(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">请求地址</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpRequestHelper.Post(System.String,System.String,System.Int32)">
            <summary>
            Post请求
            <para>可以在请求失败后重新尝试</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">请求数据</param>
            <param name="retryNum">重试次数</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpRequestHelper.Get(System.String,System.Int32)">
            <summary>
            Get请求
            <para>可以在请求失败后重新尝试</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="retryNum">重试次数</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpRequestHelper.HttpPost(System.String,System.String,System.Int32)">
            <summary>
            POST方法
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">post数据</param>
            <param name="depthNum">重试深度</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpRequestHelper.HttpGet(System.String,System.Int32)">
            <summary>
            GET方法
            </summary>
            <param name="url"></param>
            <param name="depthNum">重试深度</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Network.Http.Linq.HttpVisitor">
            <summary>
            http访问器
            </summary>
        </member>
        <member name="T:ECSharp.Network.Http.Linq.HttpVisitor.Request">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.Linq.HttpVisitor.commandList">
            <summary>
            回调委托列表
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.Linq.HttpVisitor.allHttpListener">
            <summary>
            全局Http监听者
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.Linq.HttpVisitor.listener">
            <summary>
            异常回调函数地址
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpVisitor.#ctor(ECSharp.Network.Http.Linq.IHttpVisitor)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpVisitor.Add(System.String,ECSharp.Network.Http.Linq.HttpVisitor.Request)">
            <summary>
            添加访问函数
            相同访问后缀可以被覆盖 可重复注册相同后缀访问已更新内容
            </summary>
            <param name="suffix">标记后缀,空字符串表示根访问</param>
            <param name="callback">访问函数</param>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpVisitor.SetAllListener(ECSharp.Network.Http.Linq.HttpVisitor.Request)">
            <summary>
            设置全局监听者
            <para>虽然访问器可以监听各个想要监听的地址</para>
            <para>但是无法有一个共同回调来处理一些特殊的需求</para>
            <para>这个监听是返回所有可以接收到的请求,以此来实现添加Add无法实现的全部监听</para>
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.HttpVisitor.HttpException(ECSharp.Network.Http.HttpRequest,System.Exception)">
            <summary>
            异常捕捉回调
            </summary>
            <param name="exception"></param>
            <param name="request"></param>
        </member>
        <member name="T:ECSharp.Network.Http.Linq.IHttpVisitor">
            <summary>
            捕捉接受异常接口
            </summary>
        </member>
        <member name="M:ECSharp.Network.Http.Linq.IHttpVisitor.HttpVisitorException(ECSharp.Network.Http.HttpRequest,System.Exception)">
            <summary>
            异常捕捉回调
            </summary>
            <param name="request"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ECSharp.Network.Http.RequestHeaders">
            <summary>
            请求头关键名
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.CacheControl">
            <summary>
            Cache-Control 标头，指定请求/响应链上所有缓存控制机制必须服从的指令。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Connection">
            <summary>
            Connection 标头，指定特定连接需要的选项。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Date">
            <summary>
            Date 标头，指定开始创建请求的日期和时间。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.KeepAlive">
            <summary>
            Keep-Alive 标头，指定用以维护持久性连接的参数。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Pragma">
            <summary>
            Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Trailer">
            <summary>
            Trailer 标头，指定标头字段显示在以 chunked 传输编码方式编码的消息的尾部。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.TransferEncoding">
            <summary>
            Transfer-Encoding 标头，指定对消息正文应用的转换的类型（如果有）。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Upgrade">
            <summary>
            Upgrade 标头，指定客户端支持的附加通信协议。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Via">
            <summary>
            Via 标头，指定网关和代理程序要使用的中间协议。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Warning">
            <summary>
            Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Allow">
            <summary>
            Allow 标头，指定支持的 HTTP 方法集。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentLength">
            <summary>
            Content-Length 标头，指定伴随正文数据的长度（以字节为单位）。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentType">
            <summary>
            Content-Type 标头，指定伴随正文数据的 MIME 类型。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentEncoding">
            <summary>
            Content-Encoding 标头，指定已应用于伴随正文数据的编码。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentLanguage">
            <summary>
            Content-Langauge 标头，指定伴随正文数据的自然语言。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentLocation">
            <summary>
            Content-Location 标头，指定可从其中获得伴随正文的 URI。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentMd5">
            <summary>
            Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ContentRange">
            <summary>
            Content-Range 标头，指定在完整正文中应用伴随部分正文数据的位置。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Expires">
            <summary>
            Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.LastModified">
            <summary>
            Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Accept">
            <summary>
            Accept 标头，指定响应可接受的 MIME 类型。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.AcceptCharset">
            <summary>
            Accept-Charset 标头，指定响应可接受的字符集。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.AcceptEncoding">
            <summary>
            Accept-Encoding 标头，指定响应可接受的内容编码。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.AcceptLanguage">
            <summary>
            Accept-Langauge 标头，指定响应首选的自然语言。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Authorization">
            <summary>
            Authorization 标头，指定客户端为向服务器验证自身身份而出示的凭据。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Cookie">
            <summary>
            Cookie 标头，指定向服务器提供的 Cookie 数据。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Expect">
            <summary>
            Expect 标头，指定客户端要求的特定服务器行为。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.From">
            <summary>
            From 标头，指定控制请求用户代理的用户的 Internet 电子邮件地址。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Host">
            <summary>
            Host 标头，指定所请求资源的主机名和端口号。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.IfMatch">
            <summary>
            If-Match 标头，指定仅当客户端的指示资源的缓存副本是最新的时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.IfModifiedSince">
            <summary>
            If-Modified-Since 标头，指定仅当自指示的数据和时间之后修改了请求的资源时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.IfNoneMatch">
            <summary>
            If-None-Match 标头，指定仅当客户端的指示资源的缓存副本都不是最新的时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.IfRange">
            <summary>
            If-Range 标头，指定如果客户端的缓存副本是最新的，仅发送指定范围的请求资源。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.IfUnmodifiedSince">
            <summary>
            If-Unmodified-Since 标头，指定仅当自指示的日期和时间之后修改了请求的资源时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.MaxForwards">
            <summary>
            Max-Forwards 标头，指定一个整数，表示此请求还可转发的次数。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.ProxyAuthorization">
            <summary>
            Proxy-Authorization 标头，指定客户端为向代理验证自身身份而出示的凭据。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Referer">
            <summary>
            Referer 标头，指定从中获得请求 URI 的资源的 URI。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Range">
            <summary>
            Range 标头，指定代替整个响应返回的客户端请求的响应的子范围。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Te">
            <summary>
            TE 标头，指定响应可接受的传输编码方式。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.Translate">
            <summary>
            Translate 标头，与 WebDAV 功能一起使用的 HTTP 规范的 Microsoft 扩展。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.RequestHeaders.UserAgent">
            <summary>
            User-Agent 标头，指定有关客户端代理的信息。
            </summary>
        </member>
        <member name="T:ECSharp.Network.Http.ResponseHeaders">
            <summary>
            应答头部关键名
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.CacheControl">
            <summary>
            Cache-Control 标头，指定请求/响应链上所有缓存机制必须服从的缓存指令。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Connection">
            <summary>
            Connection 标头，指定特定连接需要的选项。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Date">
            <summary>
            Date 标头，指定响应产生的日期和时间。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.KeepAlive">
            <summary>
            Keep-Alive 标头，指定用于维护持久连接的参数。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Pragma">
            <summary>
            Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Trailer">
            <summary>
            Trailer 标头，指定指示的标头字段在消息（使用分块传输编码方法进行编码）的尾部显示。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.TransferEncoding">
            <summary>
            Transfer-Encoding 标头，指定对消息正文应用哪种类型的转换（如果有）。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Upgrade">
            <summary>
            Upgrade 标头，指定客户端支持的附加通信协议。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Via">
            <summary>
            Via 标头，指定网关和代理程序要使用的中间协议。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Warning">
            <summary>
            Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Allow">
            <summary>
            Allow 标头，指定支持的 HTTP 方法集。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentLength">
            <summary>
            Content-Length 标头，指定伴随正文数据的长度（以字节为单位）。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentType">
            <summary>
            Content-Type 标头，指定伴随正文数据的 MIME 类型。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentEncoding">
            <summary>
            Content-Encoding 标头，指定已应用于伴随正文数据的编码。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentLanguage">
            <summary>
            Content-Langauge 标头，指定自然语言或伴随正文数据的语言。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentLocation">
            <summary>
            Content-Location 标头，指定可以从中获取伴随正文的 URI。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentMd5">
            <summary>
            Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ContentRange">
            <summary>
            Range 标头，指定客户端请求返回的响应的单个或多个子范围来代替整个响应。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Expires">
            <summary>
            Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.LastModified">
            <summary>
            Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.AcceptRanges">
            <summary>
            Accept-Ranges 标头，指定服务器接受的范围。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Age">
            <summary>
            Age 标头，指定自起始服务器生成响应以来的时间长度（以秒为单位）。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ETag">
            <summary>
            Etag 标头，指定请求的变量的当前值。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Location">
            <summary>
            Location 标头，指定为获取请求的资源而将客户端重定向到的 URI。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.ProxyAuthenticate">
            <summary>
            Proxy-Authenticate 标头，指定客户端必须对代理验证其自身。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.RetryAfter">
            <summary>
            Retry-After 标头，指定某个时间（以秒为单位）或日期和时间，在此时间之后客户端可以重试其请求。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Server">
            <summary>
            Server 标头，指定关于起始服务器代理的信息。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.SetCookie">
            <summary>
            Set-Cookie 标头，指定提供给客户端的 Cookie 数据。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.Vary">
            <summary>
            Vary 标头，指定用于确定缓存的响应是否为新响应的请求标头。
            </summary>
        </member>
        <member name="F:ECSharp.Network.Http.ResponseHeaders.WwwAuthenticate">
            <summary>
            WWW-Authenticate 标头，指定客户端必须对服务器验证其自身。
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.AddressFamily">
            <summary>
            地址簇
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.AddressFamily.InterNetwork">
            <summary>
            Address for IP version 4.
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.AddressFamily.InterNetworkV6">
            <summary>
            Address for IP version 6.
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Client.ClientSocket">
            <summary>
            ESF客户端套接字
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.clientSocket">
            <summary>
            远程客户端套接字
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.numMaxBufferSize">
            <summary>
            接受缓存最大长度
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.buffer">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.Tag">
            <summary>
            用户绑定对象
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Client.ClientSocket.RBuffer">
            <summary>
            解析缓存
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.socketInvoke">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.isRecving">
            <summary>
            接受状态
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Client.ClientSocket.HasConnected">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.sendEventArgs">
            <summary>
            发送事件参数
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.ClientSocket.readWriteEventArg">
            <summary>
            读写参数
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            构造函数
            <para>创建一个异步socket</para>
            </summary>
            <param name="ip">ip地址</param>
            <param name="port">端口</param>
            <param name="numMaxBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.#ctor(ECSharp.Network.Sockets.Socket,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="esfSocket">ESFSocket对象</param>
            <param name="numMaxBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Init(ECSharp.Network.Sockets.AddressFamily,ECSharp.Network.Sockets.SocketType,ECSharp.Network.Sockets.ProtocolType,ECSharp.Network.Sockets.Client.ISocket)">
            <summary>
            初始化套接字
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(System.Span{System.Byte})">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(ECSharp.Variant.Var)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(ECSharp.Variant.VarList)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(ECSharp.Variant.VarMap)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(System.UInt16,System.Span{System.Byte})">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(System.UInt16,System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Send(System.UInt16,System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.ReceiveCallback(System.IAsyncResult)">
            <summary>
            接受线程函数(异步)
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.ReceiveFromCallback(System.IAsyncResult)">
            <summary>
            接受线程函数(异步)
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.TriggerSocketInvoke">
            <summary>
            触发回调委托
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.SendBuffer(System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送数据
            <para>返回 0 为成功 -1 异常</para>
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
            <returns>0 为成功 -1 异常</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.SendBufferTo(System.UInt16,System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送数据 报文
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.IO_Completed(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            IO完成端口
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            线程发送
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.BeginReceived">
            <summary>
            开始监听
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.BeginReceivedFrom">
            <summary>
            开始监听 udp
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ClientSocket.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Client.ISocket">
            <summary>
            套接字委托接口回调
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ISocket.OnReceivedCompleted(ECSharp.Network.Sockets.Client.SocketMsg)">
            <summary>
            完成接受回调
            </summary>
            <param name="msg">数据信息</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.ISocket.SocketException(System.Exception)">
            <summary>
            套接字异常捕获
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="T:ECSharp.Network.Sockets.Client.SocketMsg">
            <summary>
            套接字信息体
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.SocketMsg.sessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.SocketMsg.data">
            <summary>
            网络数据
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Client.SocketMsg.sender">
            <summary>
            发送者
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.SocketMsg.#ctor(System.UInt16,System.Byte[],ECSharp.Network.Sockets.Client.ClientSocket)">
            <summary>
            构造
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="sender"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.SocketMsg.AsJObject">
            <summary>
            网络数据转为json对象
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json对象</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Client.SocketMsg.AsArray">
            <summary>
            网络数据转为json数组
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json数组</returns>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket">
            <summary>
            超级套接字
            <para>使用最简单方式来建立服务器或客户端连接</para>
            <para>可以使用可靠的TCP通信、UDP[KCP]通信</para>
            <para>在连接过程中因为握手是异步处理的，所以需要在接口中才能得到正确的连接对象</para>
            <para>如果仅仅是创建了对象后就发送消息等操作是无法正确应答的</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.HeartPongBytes">
            <summary>
            心跳pong字节
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.HeartPingBytes">
            <summary>
            心跳ping字节
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.ConnectedClientBytes">
            <summary>
            客户端连接成功字节
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.FirstConnectBytes">
            <summary>
            初次握手
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.SignSecurityBytes">
            <summary>
            签名握手
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.IsServerMode">
            <summary>
            是否为服务器模式
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.ip">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.TcpPort">
            <summary>
            TCP模式监听端口
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.UdpPort">
            <summary>
            UDP模式监听端口
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.IsAlive">
            <summary>
            存活状态
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.heartCheckPeriod">
            <summary>
            心跳检测周期
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.#ctor(System.Boolean,System.String,System.UInt32,System.UInt32,System.UInt32,ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig)">
            <summary>
            构造函数
            </summary>
            <param name="IsServerMode"></param>
            <param name="ip"></param>
            <param name="tcpPort"></param>
            <param name="udpPort"></param>
            <param name="connectMaxNum"></param>
            <param name="config"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.Update(System.Int32)">
            <summary>
            心跳检测
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.Close">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.BaseHyperSocket.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.HyperSocket">
            <summary>
            超级套接字 客户端
            <para>使用最简单方式来建立服务器或客户端连接</para>
            <para>可以使用可靠的TCP通信、UDP[KCP]通信</para>
            <para>在连接过程中因为握手是异步处理的，所以需要在接口中才能得到正确的连接对象</para>
            <para>如果仅仅是创建了对象后就发送消息等操作是无法正确应答的</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.tcpClient">
            <summary>
            TCP连接客户端
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.udpClient">
            <summary>
            UDP连接客户端
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.cntListener">
            <summary>
            客户端监听器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SessionId">
            <summary>
            客户端会话ID
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Tag">
            <summary>
            连接标识
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.isClosed">
            <summary>
            已经关闭
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.IsValid">
            <summary>
            获取有效性
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocket.isSecurityConnected">
            <summary>
            是否安全连接 启用安全连接才可以使用
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.#ctor(System.String,System.UInt32,ECSharp.Network.Sockets.HyperSocket.IHyperSocketClient,ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig)">
            <summary>
            创建一个客户端超级套接字
            <para>客户端会尝试连接3次，如果3次都失败则触发连接失败回调</para>
            </summary>
            <param name="ip">连接地址</param>
            <param name="port">连接端口</param>
            <param name="listener">监听器</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Connect">
            <summary>
            开启连接
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendTcp(System.Byte[])">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendUdp(System.Byte[])">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendTcp(System.String)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendUdp(System.String)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendTcp(ECSharp.Variant.Var)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendUdp(ECSharp.Variant.Var)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendTcp(ECSharp.Variant.VarList)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendUdp(ECSharp.Variant.VarList)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendTcp(ECSharp.Variant.VarMap)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendUdp(ECSharp.Variant.VarMap)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Send(System.Byte[],System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="data">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Send(System.String,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="dataStr">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Send(ECSharp.Variant.Var,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="value">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Send(ECSharp.Variant.VarList,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="list">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Send(ECSharp.Variant.VarMap,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="map">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.SendPing">
            <summary>
            发送数据 TCP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.VerifyServerData(System.ReadOnlySpan{System.Byte})">
            <summary>
            验证服务器数据
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.InitializeUdpClient(System.ReadOnlySpan{System.Byte})">
            <summary>
            初始化 验证服务器的会话标识 地址 端口
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.UpdateEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocket.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule">
            <summary>
            超级套接字客户端模块
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule.listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule.kcpHelper">
            <summary>
            kcp协议模块
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule.heartCheckTimeOut">
            <summary>
            心跳检测超时累计
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule.hasFirstRecvPong">
            <summary>
            第一次接受到pong消息
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule.OnSend(System.Span{System.Byte})">
            <summary>
            kcp转发发射接口
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketClientModule.OnReceive(System.Byte[])">
            <summary>
            kcp转收接收接口
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig">
            <summary>
            超级套接字配置
            <para>创建套接字所需要的一些配置</para>
            <para>配置中括号C代表客户端配置 S代表服务端配置 C+S 代表双端皆使用的配置</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.TcpReceiveSize">
            <summary>
            [C+S] TCP协议接受数据大小
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.UdpReceiveSize">
            <summary>
            [C+S] UDP协议接受数据大小
            <para>mtu建议设置小于默认值1380以下 否则可能导致丢包</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.HeartTimeOut">
            <summary>
            [C+S] 心跳超时时间 单位 毫秒ms
            <para>超过心跳服务器/客户端自动断开释放</para>
            <para>可以通过调整心跳检测周期来更改误差</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.HeartCheckPeriod">
            <summary>
            [S] 服务端心跳检测超时周期 单位 毫秒ms
            <para>系统会根据此时间来接受心跳检测</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.HeartSendPeriod">
            <summary>
            [C] 客户端心跳发送周期 单位 毫秒ms
            <para>系统会根据此时间来循环发送心跳用来检测</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.UseSSL">
            <summary>
            [S] 使用安全传输协议
            <para>设置为true则打开安全协议</para>
            <para>只需要服务端配置为使用状态，客户端会自动以安全传输连接</para>
            <para></para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.SSLMode">
            <summary>
            [S] 使用安全传输模式
            <para>传输可以决定在安全协议下 哪种通信使用加密传输 默认TCP/UDP都是用加密传输</para>
            <para>0 TCP/UDP全使用加密传输 1 TCP使用加密传输 2 UDP使用加密传输</para>
            <para></para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.kcpMode">
            <summary>
            [C+S] KCP模式
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig.KcpWinSize">
            <summary>
            [C+S] KCP窗口大小[目前输出输入窗口采用一个值]
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer">
            <summary>
            超级套接字 服务器
            <para>使用最简单方式来建立服务器或客户端连接</para>
            <para>可以使用可靠的TCP通信、UDP[KCP]通信</para>
            <para>在连接过程中因为握手是异步处理的，所以需要在接口中才能得到正确的连接对象</para>
            <para>如果仅仅是创建了对象后就发送消息等操作是无法正确应答的</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.ConnectMaxNum">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.TcpServer">
            <summary>
            TCP连接服务器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.UdpServer">
            <summary>
            UDP连接服务器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.svrListener">
            <summary>
            服务端监听器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.remoteSockets">
            <summary>
            远程连接
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.ConnectedCount">
            <summary>
            实际TCP套接字连接数量
            <para>此数量 ServerSocket 类中获得,为实际连接到服务中连接数量</para>
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.#ctor(System.String,System.UInt32,System.UInt32,ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer,ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig)">
            <summary>
            创建一个服务器超级套接字
            </summary>
            <param name="ip">监听地址</param>
            <param name="port">监听端口 TCP/UDP共用相同端口</param>
            <param name="connectMaxNum">允许最大连接数 最大为65534个连接数</param>
            <param name="listener">监听器</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.#ctor(System.String,System.UInt32,System.UInt32,System.UInt32,ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer,ECSharp.Network.Sockets.HyperSocket.HyperSocketConfig)">
            <summary>
            创建一个服务器超级套接字
            </summary>
            <param name="ip">监听地址</param>
            <param name="tcpPort">tcp端口</param>
            <param name="udpPort">udp端口</param>
            <param name="connectMaxNum">允许最大连接数</param>
            <param name="listener">监听器</param>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.StartServer">
            <summary>
            开启服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.GetSocket(System.UInt16)">
            <summary>
            获取套接字
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.GenerateVerifyConnection(System.UInt16@)">
            <summary>
            生成认证通道
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.GetUnusedSocketIndex">
            <summary>
            返回未使用的远程套接字索引
            <para>0 位占用 不使用</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.SetSocketAtIndex(System.UInt16,ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket)">
            <summary>
            设置远程套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.GetSocketAtIndex(System.UInt16)">
            <summary>
            获取远程套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.HyperSocketServer.UpdateEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.HyperSocketServerModule">
            <summary>
            超级服务器套接字模块
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.HyperSocketServerModule.listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.IHyperSocketClient">
            <summary>
            超级套接字客户端监听器
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketClient.OnOpen(ECSharp.Network.Sockets.HyperSocket.HyperSocket)">
            <summary>
            连接成功套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketClient.OnTcpReceive(System.Byte[],ECSharp.Network.Sockets.HyperSocket.HyperSocket)">
            <summary>
            接受数据TCP
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketClient.OnUdpReceive(System.Byte[],ECSharp.Network.Sockets.HyperSocket.HyperSocket)">
            <summary>
            接受数据UDP
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketClient.SocketError(ECSharp.Network.Sockets.HyperSocket.HyperSocket,System.Exception)">
            <summary>
            套接字错误
            </summary>
            <param name="socket"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer">
            <summary>
            超级套接字服务端监听器
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer.OnOpen(ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket)">
            <summary>
            连接成功套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer.OnTcpReceive(System.Byte[],ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket)">
            <summary>
            接受数据TCP
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer.OnUdpReceive(System.Byte[],ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket)">
            <summary>
            接受数据UDP
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer.OnClose(ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket)">
            <summary>
            关闭套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.IHyperSocketServer.SocketError(ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket,System.Exception)">
            <summary>
            套接字错误
            </summary>
            <param name="socket"></param>
            <param name="ex"></param>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.IKcp">
            <summary>
            kcp监听器
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.KcpHelper">
            <summary>
            KCP助手
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.KcpHelper.nextUpdateTime">
            <summary>
            下次更新时间 【kcp优化方案】
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.KcpHelper.noNetDataCount">
            <summary>
            无网络数据更新次数  【kcp优化方案】
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.KcpHelper.Send(System.Span{System.Byte})">
            <summary>
            上层kcp发射
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.KcpHelper.Recv(System.Span{System.Byte})">
            <summary>
            上层kcp接收
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.KcpHelper.Output(System.Buffers.IMemoryOwner{System.Byte},System.Int32)">
            <summary>
            kcp发射
            </summary>
            <param name="buffer"></param>
            <param name="avalidLength"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.KcpHelper.Update(System.Int32)">
            <summary>
            更新
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.KcpHelper.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.KcpMode">
            <summary>
            KCP模式
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.KcpMode.Normal">
            <summary>
            普通模式
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.KcpMode.Fast">
            <summary>
            快速模式
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket">
            <summary>
            远程超级套接字
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.kcpHelper">
            <summary>
            kcp协议模块
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.IsAlive">
            <summary>
            在线状态
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.isValid">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.isConnecting">
            <summary>
            是否正在连接
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.isSecurityConnected">
            <summary>
            是否安全连接 启用安全连接才可以使用
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.Tag">
            <summary>
            与远程对象捆绑标记
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.heartCheckTimeOut">
            <summary>
            心跳检测超时累计
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.ip">
            <summary>
            ip地址
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.tcpPort">
            <summary>
            tcp端口
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.udpPort">
            <summary>
            udp端口
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendPong">
            <summary>
            发送数据 TCP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendSignData(System.ReadOnlySpan{System.Byte})">
            <summary>
            发送签名 TCP
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendKcp(System.Span{System.Byte})">
            <summary>
            发送数据 UDP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendTcp(System.Byte[])">
            <summary>
            发送数据 TCP
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendUdp(System.Byte[])">
            <summary>
            发送数据 UDP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendTcp(System.String)">
            <summary>
            发送数据 TCP
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendUdp(System.String)">
            <summary>
            发送数据 UDP
            </summary>
            <param name="dataStr"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendTcp(ECSharp.Variant.Var)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendUdp(ECSharp.Variant.Var)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendTcp(ECSharp.Variant.VarList)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendUdp(ECSharp.Variant.VarList)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendTcp(ECSharp.Variant.VarMap)">
            <summary>
            通过TCP发送数据
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.SendUdp(ECSharp.Variant.VarMap)">
            <summary>
            通过UDP发送数据[KCP]
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.Send(System.Byte[],System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="data">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.Send(System.String,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="dataStr">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.Send(ECSharp.Variant.Var,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="value">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.Send(ECSharp.Variant.VarList,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="list">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.Send(ECSharp.Variant.VarMap,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="map">数据</param>
            <param name="isTcpMode">默认tcp模式，否则udp模式</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.OnReceive(System.Byte[])">
            <summary>
            内部接受函数 KCP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.OnSend(System.Span{System.Byte})">
            <summary>
            内部发送函数 KCP
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.RecvData(System.Span{System.Byte})">
            <summary>
            接受原始数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.CheckSameRemote(ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            检测是不是一样的远程
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.CheckSameRemote(System.Net.EndPoint)">
            <summary>
            检测是不是一样的远程
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.GetRemoteIp">
            <summary>
            获取远程IP
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.GetRemoteTcpPort">
            <summary>
            获取TCP远程端口
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.GetRemoteUdpPort">
            <summary>
            获取UDP远程端口
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.HyperSocket.RemoteHyperSocket.CloseSocket">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.ISocketIOEvent">
            <summary>
            套接字IO事件接口
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.MySocketAsyncEventArgs">
            <summary>
            套接字异步事件变量
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.MySocketAsyncEventArgsEx">
            <summary>
            套接字异步事件变量
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.MySocketAsyncEventArgsEx.Push">
            <summary>
            推入
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.ProtocolType.Tcp">
            <summary>
            Transmission Control Protocol.
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.ProtocolType.Udp">
            <summary>
            User Datagram Protocol.
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.BufferManager">
            <summary>
            数据管理器
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.IRemoteSocket">
            <summary>
            远程套接字委托接口回调
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.IRemoteSocket.OnReceivedCompleted(ECSharp.Network.Sockets.Server.RemoteSocketMsg)">
            <summary>
            完成接受回调
            </summary>
            <param name="msg">数据信息体</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.IRemoteSocket.SocketException(ECSharp.Network.Sockets.Server.RemoteConnection,System.Exception)">
            <summary>
            套接字异常捕获
            </summary>
            <param name="conn">连接对象</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.IServerSocket">
            <summary>
            套接字状态监听回调
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.IServerSocket.OnConnect(ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            新连接回调
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.IServerSocket.OnClose(ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            连接关闭回调
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask">
            <summary>
            监控套接字状态任务 (服务器用)
            <para>监控原理：只要处于队列中的用户票据都会每秒递增1，达到设定超时秒数后移除。（只要收到任何对方消息都会重置该事件）</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.timeoutSecond">
            <summary>
            超时时间。 单位秒，只有大于0才生效
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="timeout">(超时)断线时间，单位:s</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.SetTimeout(System.Int32)">
            <summary>
            设置超时时间
            </summary>
            <param name="timeout">(超时)断线时间，单位:s 小于0则不生效</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.PushCheck(ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            推送检测
            </summary>
            <param name="token">需要检测的客户端票据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.TimeoutTaskCallback">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.Close">
            <summary>
            关闭任务
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.MonitorSocketStatusTask.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.RemoteConnection">
            <summary>
            远程客户端连接
            <para>TCP模式下 主动推送数据直接保存</para>
            <para>UDP模式下 主动推送需要调用CloneUDPConnection()保存使用</para>
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.SocketSvrMgr">
            <summary>
            连接服务控制对象
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.RBuffer">
            <summary>
            数据包缓存
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.IsAlive">
            <summary>
            存活情况
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.HasConnected">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.timeoutCount">
            <summary>
            时间计时器
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.SocketInvoke">
            <summary>
            异步接受信息委托回调
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.Socket">
            <summary>
            ESF.Socket
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.Tag">
            <summary>
            用户绑定对象(TCP模式)
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.hashCode">
            <summary>
            哈希
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.hySocket">
            <summary>
            超级远程连接
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.isVaildHyperSocket">
            <summary>
            是否为有效超级套接字
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.ReceiveEventArgs">
            <summary>
            接受事件参数
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.sendEventArgs">
            <summary>
            发送事件参数
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteConnection.readWriteEventArg">
            <summary>
            服务分配的系统接收参数
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.RemoteConnection.ConnectDateTime">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.#ctor(ECSharp.Network.Sockets.Server.ServerSocket,ECSharp.Network.Sockets.Server.IRemoteSocket)">
            <summary>
            构造函数 tcp
            <para>正式调用还需执行Init()</para>
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.#ctor(System.Net.EndPoint,ECSharp.Network.Sockets.Server.ServerSocket)">
            <summary>
            构造函数 udp
            <para>正式调用还需执行Init()</para>
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Init(ECSharp.Network.Sockets.Socket)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(System.ReadOnlySpan{System.Byte})">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(ECSharp.Variant.Var)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(ECSharp.Variant.VarList)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(ECSharp.Variant.VarMap)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(System.UInt16,System.ReadOnlySpan{System.Byte})">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">数据偏移</param>
            <param name="count">数据大小</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(System.UInt16,System.String)">
            <summary>
            发送数据(utf8字符串数据)
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="utf8str">数据</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Send(System.UInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="sessionId">会话ID</param>
            <param name="buffer">数据</param>
            <param name="offset">数据偏移</param>
            <param name="count">数据大小</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.TriggerSocketInvoke">
            <summary>
            触发回调委托
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteConnection.Destroy">
            <summary>
            销毁当前对象并且从服务器列表中删除
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.RemoteSocketMsg">
            <summary>
            远程套接字信息体
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteSocketMsg.sessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteSocketMsg.data">
            <summary>
            网络数据
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteSocketMsg.sender">
            <summary>
            发送者
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.RemoteSocketMsg.remoteEndPoint">
            <summary>
            发送远程终端
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteSocketMsg.#ctor(System.UInt16,System.Byte[],ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            构造
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="sender"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteSocketMsg.#ctor(System.UInt16,System.Byte[],System.Net.EndPoint)">
            <summary>
            构造
            </summary>
            <param name="sessionId"></param>
            <param name="data"></param>
            <param name="remoteEndPoint"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteSocketMsg.AsJObject">
            <summary>
            网络数据转为json对象
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json对象</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.RemoteSocketMsg.AsJArray">
            <summary>
            网络数据转为json数组
            <para>默认编码UTF-8 如错误解析则抛出异常</para>
            </summary>
            <returns>json数组</returns>
        </member>
        <member name="T:ECSharp.Network.Sockets.Server.ServerSocket">
            <summary>
            ESF套接字服务端管理
            <para>通过新建ESFSocket对象 装载到此类中即可生成一个服务器对象</para>
            <para>UDP访问仅仅通过本类不能监控其断开状态，需要自主定制</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.TcpClients">
            <summary>
            客户端连接合集 tcp
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.numMaxConnections">
            <summary>
            客户端连接设计为同时处理的最大连接数
            the maximum number of connections the sample is designed to handle simultaneously 
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.receiveBufferSize">
            <summary>
            用于每个套接字I/O操作的缓冲区大小
            buffer size to use for each socket I/O operation 
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.bufferManager">
            <summary>
            表示所有套接字操作的一组可重用的大缓冲区
            represents a large reusable set of buffers for all socket operations
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.opsToPreAlloc">
            <summary>
            读、写（不为接受分配缓冲区空间）
            read, write (don't alloc buffer space for accepts)
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.serverSocket">
            <summary>
            用于侦听传入连接请求的ESF套接字
            the socket used to listen for incoming connection requests
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.readWritePool">
            <summary>
            用于写入、读取和接受套接字操作的可重用SocketAsyncEventArgs对象池
            pool of reusable System.Net.Sockets.SocketAsyncEventArgs objects for write, read and accept socket operations
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.numConnectedSockets">
            <summary>
            服务器接收的总字节数计数器
            counter of the total # bytes received by the server
            </summary>
            private int totalBytesRead;
            <summary>
            连接到服务器的客户端总数
            the total number of clients connected to the server
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.maxNumberAcceptedClients">
            <summary>
            最大容许客户端数量
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.socketInvoke">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.socketStatusListener">
            <summary>
            套接字状态监听回调器
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.monitorSocketStatusTask">
            <summary>
            监听套接字状态任务
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Server.ServerSocket.ConnectedNum">
            <summary>
            已连接数
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Server.ServerSocket.isRunning">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            新建套接字服务管理对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口</param>
            <param name="numMaxConnections">可同时连接客户端最大数</param>
            <param name="receiveBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.#ctor(ECSharp.Network.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            新建套接字服务管理对象
            </summary>
            <param name="esfSocket">ESF套接字</param>
            <param name="numMaxConnections">可同时连接客户端最大数</param>
            <param name="receiveBufferSize">接受数据大小[UDP模式以传送理论最大值/TCP模式以传送最佳合适值]</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.Init(ECSharp.Network.Sockets.AddressFamily,ECSharp.Network.Sockets.SocketType,ECSharp.Network.Sockets.ProtocolType,System.Int32,ECSharp.Network.Sockets.Server.IRemoteSocket)">
            <summary>
            初始化套接字服务管理
            </summary>
            <param name="addressFamily">地址协议簇 [ipv4或ipv6]</param>
            <param name="socketType">套接字类型 [stream或Dgram]</param>
            <param name="protocolType">协议类型 [tcp或者udp]</param>
            <param name="backlog">同时监听接入连接数 默认为0, 即 并发可监听数</param>
            <param name="socketInvoke">委托回调</param>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.StartServer">
            <summary>
            启动服务
            <para>现在不需要手动处理了，Init里直接执行</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.GetClientCount">
            <summary>
            返回客户端连接数
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.CheckExistClient(ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            查询是否还存在指定客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.RemoveExistClient(ECSharp.Network.Sockets.Server.RemoteConnection)">
            <summary>
            移除指定客户端
            </summary>
            <param name="client">指定客户端对象</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.SetSocketEvent(ECSharp.Network.Sockets.Server.IServerSocket)">
            <summary>
            设置套接字事件监听
            <para>单独设置监听 有可能无法检测到断开连接情况</para>
            <para>TCP可以使用监控任务 UDP无法通过监控判断其断开情况</para>
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.SetSocketEvent(ECSharp.Network.Sockets.Server.IServerSocket,ECSharp.Network.Sockets.Server.MonitorSocketStatusTask)">
            <summary>
            设置套接字事件监听且可定义监控任务
            <para>UDP无需使用方法，因为无效</para>
            </summary>
            <param name="listener"></param>
            <param name="task"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            开始接受新客户端连接
            <para>IOCP模型构建</para>
            </summary>
            <param name="acceptEventArg">异步事件参数</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs,System.Boolean)">
            <summary>
            处理新客户端连接
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接受数据进程
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.StartAcceptReceiveFrom">
            <summary>
            开始接受新客户端连接
            <para>IOCP模型构建</para>
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.ProcessReceiveFrom(System.Net.Sockets.SocketAsyncEventArgs,System.Boolean)">
            <summary>
            接受数据进程 udp
            </summary>
            <param name="e"></param>
            <param name="isFirst"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.IO_Completed(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            IO完成端口
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            线程发送
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.SendAsyncEvent(ECSharp.Network.Sockets.Server.RemoteConnection,System.UInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="client"></param>
            <param name="sessionId">会话ID</param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Server.ServerSocket.CloseServer">
            <summary>
            关闭服务
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.Socket">
            <summary>
            ESF框架Socket模型
            <para>此模型只能一次性使用 [无法重复连接]</para>
            <para>不建议直接使用此类创建连接操作</para>
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.Ip">
            <summary>
            ip地址
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Socket.address">
            <summary>
            ip地址对象
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Socket.endPoint">
            <summary>
            ip地址解析终端
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.AddressFamily">
            <summary>
            地址簇
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.SocketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.Socket.socket">
            <summary>
            套接字连接
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.IsConnected">
            <summary>
            连接状态
            <para>只要使用类中连接函数且绑定或连接成功，此变量就会为true</para>
            </summary>
        </member>
        <member name="P:ECSharp.Network.Sockets.Socket.IsClosed">
            <summary>
            关闭状态
            <para>只要调用过类中Close函数或者心跳检测断开连接此变量就会为true</para>
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.#ctor(System.Net.IPEndPoint)">
            <summary>
            私有构造
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.#ctor(System.String,System.Int32)">
            <summary>
            创建一个ESFSocket对象
            </summary>
            <param name="ip">ip地址</param>
            <param name="port">端口号</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.ConnectAsServer(ECSharp.Network.Sockets.AddressFamily,ECSharp.Network.Sockets.SocketType,ECSharp.Network.Sockets.ProtocolType,System.Int32)">
            <summary>
            作为服务器连接
            </summary>
            <param name="addressFamily">地址协议簇 [ipv4或ipv6]</param>
            <param name="socketType">套接字类型 [stream或Dgram]</param>
            <param name="protocolType">协议类型 [tcp或者udp]</param>
            <param name="backlog">同时监听接入连接数 默认为0</param>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.Connect(ECSharp.Network.Sockets.AddressFamily,ECSharp.Network.Sockets.SocketType,ECSharp.Network.Sockets.ProtocolType)">
            <summary>
            连接服务器端
            <para>作为客户端连接</para>
            </summary>
            <param name="addressFamily">地址协议簇 [ipv4或ipv6]</param>
            <param name="socketType">套接字类型 [stream或Dgram]</param>
            <param name="protocolType">协议类型 [tcp或者udp]</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.GetSocket">
            <summary>
            获取原生套接字对象
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.FillAsClient(System.Net.Sockets.Socket)">
            <summary>
            静态函数：作为客户端填充函数并且返回对象(服务器用) tcp
            <para>默认获得一个已连接的socket，将其载入ESFSocket中便于统一管理</para>
            </summary>
            <param name="s">已连接的套接字</param>
            <returns>返回一个ESFSocket</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.FillAsClient(System.Net.EndPoint)">
            <summary>
            静态函数：作为客户端填充函数并且返回对象(服务器用) udp
            <para>默认获得一个已连接的socket，将其载入ESFSocket中便于统一管理</para>
            </summary>
            <param name="endPoint">链接终端</param>
            <returns>返回一个ESFSocket</returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.UpdateEndPoint(System.Net.EndPoint)">
            <summary>
            更新EndPoint信息
            </summary>
            <param name="endPoint">链接终端</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.Close">
            <summary>
            关闭ESFSocket
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            TCP异步发送
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            UDP异步发送
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            TCP开始接受数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.EndReceive(System.IAsyncResult)">
            <summary>
            TCP结束接受数据
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            UDP开始接受数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="endPoint"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            TCP异步接受新连接
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            TCP异步接受数据
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            UDP异步接受数据
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Network.Sockets.SocketAsyncEventArgsEx">
            <summary>
            套接字异步事件参数拓展
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SocketAsyncEventArgsEx.argsList">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.SocketAsyncEventArgsEx.#ctor(System.Object,System.Net.EndPoint,ECSharp.Network.Sockets.ISocketIOEvent)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.SocketAsyncEventArgsEx.#ctor(System.Object,ECSharp.Network.Sockets.Socket,ECSharp.Network.Sockets.ISocketIOEvent)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.SocketAsyncEventArgsEx.ExpandNewArgs">
            <summary>
            扩容
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.SocketAsyncEventArgsEx.Pop">
            <summary>
            取出值
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Sockets.SocketAsyncEventArgsEx.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.SocketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SocketType.Stream">
            <summary>
            Supports reliable, two-way, connection-based byte streams without the duplication
            of data and without preservation of boundaries. A System.Net.Sockets.Socket of
            this type communicates with a single peer and requires a remote host connection
            before communication can begin. System.Net.Sockets.SocketType.Stream uses the
            Transmission Control Protocol (ProtocolType.System.Net.Sockets.ProtocolType.Tcp)
            and the AddressFamily.System.Net.Sockets.AddressFamily.InterNetwork address family.
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SocketType.Dgram">
            <summary>
            Supports datagrams, which are connectionless, unreliable messages of a fixed
            (typically small) maximum length. Messages might be lost or duplicated and might
            arrive out of order. A System.Net.Sockets.Socket of type System.Net.Sockets.SocketType.Dgram
            requires no connection prior to sending and receiving data, and can communicate
            with multiple peers. System.Net.Sockets.SocketType.Dgram uses the Datagram Protocol
            (ProtocolType.System.Net.Sockets.ProtocolType.Udp) and the AddressFamily.System.Net.Sockets.AddressFamily.InterNetwork
            address family.
            </summary>
        </member>
        <member name="T:ECSharp.Network.Sockets.SweetStream">
            <summary>
            Sweet Stream 
            <para>糖流体拼装协议</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SweetStream.PACKAGE_MAX_SIZE">
            <summary>
            包体最大大小
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SweetStream.PACKAGE_SIZE">
            <summary>
            包体大小
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SweetStream.decodeBuffer">
            <summary>
            原始数据 解析缓冲区
            </summary>
        </member>
        <member name="F:ECSharp.Network.Sockets.SweetStream.originalQueue">
            <summary>
            原始数据队列
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.SweetStream.Decode(System.ReadOnlySpan{System.Byte})">
            <summary>
            放入数据进行等待解析
            </summary>
            <param name="buffer">接受到的数据流</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.SweetStream.ExtractData(System.ReadOnlySpan{System.Byte},System.Int32,System.Byte[]@,System.Int32@,System.Boolean@)">
            <summary>
            检查头部信息是否正确
            </summary>
        </member>
        <member name="M:ECSharp.Network.Sockets.SweetStream.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            数据打包
            <para>用于发送字节流</para>
            </summary>
            <param name="sbuffer">发送的数据流</param>
        </member>
        <member name="M:ECSharp.Network.Sockets.SweetStream.TakeStreamBuffer">
            <summary>
            提取并删除最先进入的数据
            </summary>
        </member>
        <member name="T:ECSharp.Network.Websocket.IWebsocket">
            <summary>
            websocket委托
            </summary>
        </member>
        <member name="M:ECSharp.Network.Websocket.IWebsocket.OnOpen(ECSharp.Network.Websocket.RemoteConnection)">
            <summary>
            连接打开回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.IWebsocket.OnClose(ECSharp.Network.Websocket.RemoteConnection)">
            <summary>
            连接关闭回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.IWebsocket.OnMessage(ECSharp.Network.Websocket.RemoteConnection)">
            <summary>
            收到消息回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.IWebsocket.OnBinary(ECSharp.Network.Websocket.RemoteConnection)">
            <summary>
            收到消息回调
            </summary>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.IWebsocket.OnError(ECSharp.Network.Websocket.RemoteConnection,System.Exception)">
            <summary>
            连接发生错误
            </summary>
            <param name="conn"></param>
            <param name="exception"></param>
        </member>
        <member name="T:ECSharp.Network.Websocket.RemoteConnection">
            <summary>
            远程连接对象
            </summary>
        </member>
        <member name="P:ECSharp.Network.Websocket.RemoteConnection.Socket">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:ECSharp.Network.Websocket.RemoteConnection.Tag">
            <summary>
            用户自定义标识 绑定对象
            </summary>
        </member>
        <member name="P:ECSharp.Network.Websocket.RemoteConnection.Message">
            <summary>
            字符消息
            </summary>
        </member>
        <member name="P:ECSharp.Network.Websocket.RemoteConnection.Buffer">
            <summary>
            字节消息
            </summary>
        </member>
        <member name="P:ECSharp.Network.Websocket.RemoteConnection.IsAvailable">
            <summary>
            连接对象是否有效
            </summary>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.#ctor(Fleck.IWebSocketConnection)">
            <summary>
            构建
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">字符消息</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="message">字节消息</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.Send(ECSharp.Variant.Var)">
            <summary>
            发送消息
            </summary>
            <param name="message">字节消息</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.Send(ECSharp.Variant.VarList)">
            <summary>
            发送消息
            </summary>
            <param name="message">字节消息</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.Send(ECSharp.Variant.VarMap)">
            <summary>
            发送消息
            </summary>
            <param name="message">字节消息</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.GetSocketGuid">
            <summary>
            获取唯一标识ID 同一个socket连接id不变
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.GetConnectionInfo">
            <summary>
            获取连接信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Network.Websocket.RemoteConnection.Close">
            <summary>
            关闭当前连接
            </summary>
        </member>
        <member name="T:ECSharp.Network.Websocket.WebsocketService">
            <summary>
            esf websocket服务器模块
            <para>模块是对第三方框架Fleck二次封装完成</para>
            <para>Fleck地址:https://github.com/statianzo/Fleck</para>
            </summary>
        </member>
        <member name="F:ECSharp.Network.Websocket.WebsocketService.websocketSvr">
            <summary>
            Fleck websocket服务对象
            </summary>
        </member>
        <member name="M:ECSharp.Network.Websocket.WebsocketService.#ctor(System.String,ECSharp.Network.Websocket.IWebsocket)">
            <summary>
            创建服务
            </summary>
            <param name="url">监听地址</param>
            <param name="invoke">监听委托</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.WebsocketService.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,ECSharp.Network.Websocket.IWebsocket)">
            <summary>
            创建ssl服务
            </summary>
            <param name="url">监听地址</param>
            <param name="certificate">安全证书</param>
            <param name="invoke">监听委托</param>
        </member>
        <member name="M:ECSharp.Network.Websocket.WebsocketService.InitInvoke(ECSharp.Network.Websocket.IWebsocket)">
            <summary>
            初始化委托
            </summary>
            <param name="invoke"></param>
        </member>
        <member name="M:ECSharp.Network.Websocket.WebsocketService.CloseWebSocketSvrService">
            <summary>
            关闭websocket
            </summary>
        </member>
        <member name="T:ECSharp.Time.BaseTimeFlow">
            <summary>
            时间流基类
            <para>封装了时间流必要的函数 正常使用 TimeFlow 即可</para>
            <para>框架内部调用类</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.isTimeFlowPause">
            <summary>
            时间流暂停开关
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.isTimeFlowStop">
            <summary>
            时间流停止开关
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.reference">
            <summary>
            更新接口
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.consumeTime">
            <summary>
            耗时监视器累积时间 此处内部转换为纳秒整型
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.notConsumeFixedTime">
            <summary>
            未消耗的修正时间 此处内部转换为纳秒整型
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.fixedTime">
            <summary>
            修正时间 毫秒整型
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.currentDeltaTime">
            <summary>
            当前增量时间
            </summary>
        </member>
        <member name="F:ECSharp.Time.BaseTimeFlow.IsIdle">
            <summary>
            空闲标记
            </summary>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.#ctor(ECSharp.Time.ITimeUpdate,System.Boolean,System.Int32)">
            <summary>
            构造函数 内部使用
            </summary>
            <param name="timeUpdate"></param>
            <param name="isSync">同步标记</param>
            <param name="fixedTime">修正时间</param>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.CreateTimeFlow(ECSharp.Time.ITimeUpdate,System.Boolean,System.Int32)">
            <summary>
            创建基础时间流
            </summary>
            <param name="timeUpdate"></param>
            <param name="isSync">同步标记</param>
            <param name="fixedTime">修正时间</param>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.StartTimeFlowES">
            <summary>
            开始时间流
            </summary>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.SetTimeFlowPauseES(System.Boolean)">
            <summary>
            设置时间流暂停
            </summary>
            <param name="pause">暂停开关 true暂停时间流 false恢复时间流</param>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.CloseTimeFlowES">
            <summary>
            关闭时间流
            <para>关闭后无法在此对象唤醒</para>
            </summary>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.CloseByObj(ECSharp.Time.ITimeUpdate)">
            <summary>
            通过对象关闭时间流
            </summary>
            <param name="timeUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.UpdateSyncES">
            <summary>
            内部 更新
            </summary>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.UpdateES">
            <summary>
            内部 更新
            </summary>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.UpdateSyncEndES">
            <summary>
            内部 停止更新
            </summary>
        </member>
        <member name="M:ECSharp.Time.BaseTimeFlow.UpdateEndES">
            <summary>
            内部 停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Time.ISysTime">
            <summary>
            系统时间接口
            </summary>
        </member>
        <member name="P:ECSharp.Time.ISysTime.Now">
            <summary>
            获取时间
            </summary>
        </member>
        <member name="T:ECSharp.Time.ITimeUpdate">
            <summary>
            时间流 更新接口
            <para>继承此类可以实现Update实时更新功能</para>
            <para>每次Update是先执行函数体内容再睡眠等待，所以如果需要精确的时间间隔应当先判定时间再累加时间</para>
            </summary>
        </member>
        <member name="M:ECSharp.Time.ITimeUpdate.Update(System.Int32)">
            <summary>
            更新
            <para>每次Update是先执行函数体内容再睡眠等待，所以如果需要精确的时间间隔应当先判定时间再累加时间</para>
            </summary>
            <param name="deltaTime">程序函数实际执行时间间隔 单位：毫秒</param>
        </member>
        <member name="M:ECSharp.Time.ITimeUpdate.UpdateEnd">
            <summary>
            停止更新
            <para>关闭时间流触发此函数</para>
            </summary>
        </member>
        <member name="T:ECSharp.Time.TimeCaller">
            <summary>
            时间执行器
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeCaller.Infinite">
            <summary>
            无限次数执行
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeCaller.handle">
            <summary>
            回调执行的函数
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeCaller.handleWithParam">
            <summary>
            带参数执行的函数
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeCaller.delayTime">
            <summary>
            延迟时间
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeCaller.periodTime">
            <summary>
            周期时间
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeCaller.repeatNum">
            <summary>
            重复次数
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeCaller.IsCancel">
            <summary>
            是否已取消执行
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.#ctor(System.Int32,System.Int32,System.Int32,System.Action,System.Boolean)">
            <summary>
            创建一个时间执行器
            </summary>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="repeatNum">重复次数，值为 -1 时 无限循环，默认 1 次</param>
            <param name="handle">需要被执行的函数</param>
            <param name="isSync">同步标记</param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.#ctor(System.Int32,System.Int32,System.Int32,System.Action{System.Object},System.Boolean)">
            <summary>
            创建一个时间执行器
            </summary>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="repeatNum">重复次数，值为 -1 时 无限循环，默认 1 次</param>
            <param name="handle">需要被执行的函数</param>
            <param name="isSync">同步标记</param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.Create(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个时间执行器
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="repeatNum">重复次数，值为 -1 时 无限循环，默认 1 次</param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.Create(System.Action{System.Object},System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个时间执行器
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="repeatNum">重复次数，值为 -1 时 无限循环，默认 1 次</param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.CreateSync(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个同步时间执行器
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="repeatNum">重复次数，值为 -1 时 无限循环，默认 1 次</param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.CreateSync(System.Action{System.Object},System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一个同步时间执行器
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="delayTime">第一次开始延迟时间，单位ms</param>
            <param name="periodTime">每次周期时间【第二次之后开始执行的延迟时间】，单位ms</param>
            <param name="repeatNum">重复次数，值为 -1 时 无限循环，默认 1 次</param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.Start(System.Boolean)">
            <summary>
            开始执行
            </summary>
            <param name="isDaemon">是否守护执行,守护执行后不再需要保存执行器对象</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.Start(System.Object,System.Boolean)">
            <summary>
            开始执行
            </summary>
            <param name="parameter">需要传递的参数</param>
            <param name="isDaemon">是否守护执行,守护执行后不再需要保存执行器对象</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.Cancel">
            <summary>
            取消时间执行器任务
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.CancelAllDaemonTimeCalls">
            <summary>
            取消所有守护的时间执行器任务
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ECSharp.Time.TimeCaller.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Time.TimeClock">
            <summary>
            定时时钟
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.handle">
            <summary>
            回调执行的函数
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.IsRepeat">
            <summary>
            是否重复
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.unitPeriod">
            <summary>
            单位周期 1s
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeClock.TriggerToday">
            <summary>
            今日是否触发
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.lastHour">
            <summary>
            上一个时间
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeClock.second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeClock.IsCancel">
            <summary>
            是否已取消执行
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeClock.#ctor(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime,System.Boolean)">
            <summary>
            创建一个定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">获取时间接口</param>
            <param name="isSync">同步标记</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Create(System.Action{System.DateTime},System.String,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="time">时间 格式：HH:mm::ss</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Create(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,ECSharp.Time.ISysTime)">
            <summary>
            创建一个定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Create(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Create(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Create(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.CreateSync(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,ECSharp.Time.ISysTime)">
            <summary>
            创建一个同步定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.CreateSync(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个同步定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.CreateSync(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个同步定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.CreateSync(System.Action{System.DateTime},System.Int32,System.Int32,System.Int32,System.Boolean,ECSharp.Time.ISysTime)">
            <summary>
            创建一个同步定时时钟
            </summary>
            <param name="handle">需要被执行的函数</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="isRepeat">是否重复</param>
            <param name="sysTime">系统时间获取接口</param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Start(System.Boolean)">
            <summary>
            开始执行
            </summary>
            <param name="isDaemon">是否守护执行,守护执行后不再需要保存执行器对象</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Cancel">
            <summary>
            取消时间执行器任务
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeClock.CancelAllDaemonTimeClock">
            <summary>
            取消所有守护的时间执行器任务
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeClock.Update(System.Int32)">
            <summary>
            系统调用
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:ECSharp.Time.TimeClock.UpdateEnd">
            <summary>
            停止更新
            </summary>
        </member>
        <member name="T:ECSharp.Time.TimeFlow">
            <summary>
            时间流 
            <para>继承此类可以实现Update实时更新功能</para>
            <para>为了方便类的部分初始和性能节省需手动调用 Start(); 函数</para>
            <para>每次Update是先执行函数体内容再睡眠等待，所以如果需要精确的时间间隔应当先判定时间再累加时间</para>
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeFlow.IsPause">
            <summary>
            时间流暂停开关 
            <para>只读 通过 Pause 函数修改</para>
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeFlow.IsStop">
            <summary>
            时间流停止开关
            <para>只读 通过 Close 函数修改</para>
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeFlow.TimeInterval">
            <summary>
            时间流更新间隔
            <para>默认为 TimeInterval.Interval_16ms </para>
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeFlow.#ctor(ECSharp.Time.ITimeUpdate,System.Boolean,System.Int32)">
            <summary>
            构造函数 内部使用
            </summary>
            <param name="timeUpdate"></param>
            <param name="isSync">同步标记</param>
            <param name="fixedTime">修正时间, 不能低于 TimeInterval </param>
        </member>
        <member name="M:ECSharp.Time.TimeFlow.Create(ECSharp.Time.ITimeUpdate,System.Int32)">
            <summary>
            创建一个时间流
            </summary>
            <param name="timeUpdate">更新回调接口</param>
            <param name="period">刷新周期 单位：毫秒 [不能低于 TimeInterval]</param>
        </member>
        <member name="M:ECSharp.Time.TimeFlow.CreateSync(ECSharp.Time.ITimeUpdate,System.Int32)">
            <summary>
            创建一个同步时间流
            <para>通过此函数创建的时间流将始终都处于一个线程运行</para>
            </summary>
            <param name="timeUpdate">更新回调接口</param>
            <param name="period">刷新周期 单位：毫秒 [不能低于 TimeInterval]</param>
        </member>
        <member name="M:ECSharp.Time.TimeFlow.Start">
            <summary>
            开始时间流
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeFlow.Pause">
            <summary>
            时间流暂停
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeFlow.Close">
            <summary>
            关闭时间流
            <para>关闭后无法在此对象唤醒</para>
            <para>如果可能尽可能在不再使用时调用此函数</para>
            </summary>
        </member>
        <member name="T:ECSharp.Time.TimeFlowManager">
            <summary>
            时间流 管理器
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeFlowManager.MAX_HANDLE_TASK_THREAD">
            <summary>
            最大处理任务线程数量 为逻辑处理器数量
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeFlowManager.threads">
            <summary>
            时间流控制线程
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeFlowManager.stopwatch">
            <summary>
            秒表器
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeFlowManager.TotalRunTime">
            <summary>
            程序运行总时长
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeFlowManager.PushTimeFlow(ECSharp.Time.BaseTimeFlow,System.Boolean)">
            <summary>
            压入一个时间流继承对象
            </summary>
            <param name="tf"></param>
            <param name="isSync">同步标记</param>
        </member>
        <member name="M:ECSharp.Time.TimeFlowManager.CloseByObj(ECSharp.Time.ITimeUpdate)">
            <summary>
            通过对象关闭时间流
            </summary>
            <param name="timeUpdate"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Time.TimeFlowThread">
            <summary>
            A timer that can be used to schedule events.
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeFlowThread.interval">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="P:ECSharp.Time.TimeFlowThread.Interval">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeFlowThread.UtilMsMaxHandleCount">
            <summary>
            单位毫秒最大处理数量
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeFlowThread.isSync">
            <summary>
            同步标记
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeFlowThread.UpdateHandle(System.Object)">
            <summary>
            更新句柄
            </summary>
        </member>
        <member name="M:ECSharp.Time.TimeFlowThread.CloseByObj(ECSharp.Time.ITimeUpdate)">
            <summary>
            通过对象关闭时间流
            </summary>
            <param name="timeUpdate"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Time.TimeInterval">
            <summary>
            时间间隔
            <para>用于控制时间流更新最小间隔 单位：毫秒</para>
            <para>间隔越小消耗性能越大</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_0ms">
            <summary>
            间隔0毫秒
            <para>无间隔更新会导致CPU时间片占满，但精确度最高</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_1ms">
            <summary>
            间隔1毫秒
            <para>实际间隔时间根据系统内核分辨率决定，windows下为16ms左右</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_2ms">
            <summary>
            间隔2毫秒
            <para>实际间隔时间根据系统内核分辨率决定，windows下为16ms左右</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_4ms">
            <summary>
            间隔4毫秒
            <para>实际间隔时间根据系统内核分辨率决定，windows下为16ms左右</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_8ms">
            <summary>
            间隔8毫秒
            <para>实际间隔时间根据系统内核分辨率决定，windows下为16ms左右</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_10ms">
            <summary>
            间隔10毫秒
            <para>实际间隔时间根据系统内核分辨率决定，windows下为16ms左右</para>
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_16ms">
            <summary>
            间隔16毫秒 (默认间隔)
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_20ms">
            <summary>
            间隔20毫秒 (Unity默认间隔)
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_30ms">
            <summary>
            间隔30毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_32ms">
            <summary>
            间隔32毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_40ms">
            <summary>
            间隔40毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_50ms">
            <summary>
            间隔50毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_64ms">
            <summary>
            间隔64毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_100ms">
            <summary>
            间隔100毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_200ms">
            <summary>
            间隔200毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_500ms">
            <summary>
            间隔500毫秒
            </summary>
        </member>
        <member name="F:ECSharp.Time.TimeInterval.Interval_1000ms">
            <summary>
            间隔1000毫秒
            </summary>
        </member>
        <member name="T:ECSharp.Utils.AppConfig">
            <summary>
            应用配置文件读取
            <para>默认读取项目同级目录下 [应用名].config 或 [应用名].dll.config 的XML文件(dll同样调用启动程序配置)</para>
            <para>配置文件 可以直接通过VS新建项 配置文件类型.config 生成</para>
            <para>最简单的方式通过VS添加新建项选择 应用程序配置文件 后直接确定 即可生成名为 App.config 的文件 就可以了</para>
            <para>仅支持一级层级和二级层级</para>
            <para>具体格式：&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;configuration&gt;&lt;Hello&gt;Hello World&lt;/Hello&gt;&lt;RootTest&gt;&lt;Hello&gt;Hello World2&lt;/Hello&gt;&lt;/RootTest&gt;&lt;/configuration&gt;</para>
            </summary>
        </member>
        <member name="F:ECSharp.Utils.AppConfig.doc">
            <summary>
            读取对象
            </summary>
        </member>
        <member name="M:ECSharp.Utils.AppConfig.Reload">
            <summary>
            从文件中重新读取最新的配置
            </summary>
        </member>
        <member name="M:ECSharp.Utils.AppConfig.Read(System.String)">
            <summary>
            读取参数
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.AppConfig.Read``1(System.String)">
            <summary>
            读取参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.AppConfig.Read(System.String,System.String)">
            <summary>
            读取参数 可以往下读一级
            </summary>
            <param name="group"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.AppConfig.Read``1(System.String,System.String)">
            <summary>
            读取参数 可以往下读一级
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Utils.ByteConverter">
            <summary>
            字节助手
            </summary>
        </member>
        <member name="F:ECSharp.Utils.ByteConverter.IsLittleEndian">
            <summary>
            This field indicates the "endianess" of the architecture.
            The value is set to true if the architecture is
            little endian; false if it is big endian.
            </summary>
        </member>
        <member name="F:ECSharp.Utils.ByteConverter.Empty">
            <summary>
            空数组
            </summary>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetValidLength(System.ReadOnlySpan{System.Byte})">
            <summary>
            获取byte的实际长度
            <para>数组中有连续9个字节连续为0的情况</para>
            <para>原理 默认基础类型字节占用情况最大为8个</para>
            </summary>
            <param name="bytes">数据</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetValidByte(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            获取byte的实际数据
            <para>数组中有连续9个字节连续为0的情况</para>
            <para>原理 默认基础类型字节占用情况最大为8个</para>
            </summary>
            <param name="bytes">数据</param>
            <param name="retainNum">往有效数据后保留几位，默认为 0 不保留</param>
            <returns>实际长度的byte[]</returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Char)">
            <summary>
            Converts a char into an array of bytes with length two.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Int16)">
            <summary>
            Converts a short into an array of bytes with length two.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Int32)">
            <summary>
            Converts an int into an array of bytes with length four.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Int64)">
            <summary>
            Converts a long into an array of bytes with length eight.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.UInt16)">
            <summary>
            Converts an ushort into an array of bytes with length two.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.UInt32)">
            <summary>
            Converts an uint into an array of bytes with length four.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.UInt64)">
            <summary>
            Converts an unsigned long into an array of bytes with length eight.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Single)">
            <summary>
            Converts a float into an array of bytes with length four.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.GetBytes(System.Double)">
            <summary>
            Converts a double into an array of bytes with length eight.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into a char.  
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into a short.  
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into an int.  
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into a long.  
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into an ushort.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into an uint.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into an unsigned long.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into a float.  
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes into a double.  
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.ByteConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Utils.Ini">
            <summary>
            ini文件读取
            </summary>
        </member>
        <member name="T:ECSharp.Utils.Ini.IniParser">
            <summary>
            ini文件解释器
            </summary>
        </member>
        <member name="M:ECSharp.Utils.Ini.IniParser.GetValue(System.String)">
            <summary>
            值
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.IniParser.GetValue(System.String,System.String)">
            <summary>
            值
            </summary>
            <param name="key">键名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.IniParser.GetSectionValue(System.String,System.String)">
            <summary>
            值
            </summary>
            <param name="section">节选</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.IniParser.GetSectionValue(System.String,System.String,System.String)">
            <summary>
            值
            </summary>
            <param name="section">节选</param>
            <param name="key">键名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="P:ECSharp.Utils.Ini.Current">
            <summary>
            当前加载解释器
            <para>默认每次最后加载的解释器</para>
            </summary>
        </member>
        <member name="M:ECSharp.Utils.Ini.Parsers(System.String)">
            <summary>
            获取指定解释器
            </summary>
            <param name="fileName">文件名(及后缀)</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.ReplaceCurrentParsser(System.String)">
            <summary>
            替换当前解释器
            </summary>
            <param name="fileName">文件名(及后缀)</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.LoadParser(System.String,System.Boolean)">
            <summary>
            根据路径加载解释器
            </summary>
            <param name="filePath">文件路径</param>
            <param name="isAbsolutePath">是否为绝对路径,默认为当前运行目录路径</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.GetValue(System.String)">
            <summary>
            Current的值
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.GetValue(System.String,System.String)">
            <summary>
            Current的值
            </summary>
            <param name="key">键名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.GetSectionValue(System.String,System.String)">
            <summary>
            Current的值
            </summary>
            <param name="section">节选</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Ini.GetSectionValue(System.String,System.String,System.String)">
            <summary>
            Current的值
            </summary>
            <param name="section">节选</param>
            <param name="key">键名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Utils.LocalStorage">
            <summary>
            信息存储,也可以自己读/写入新文件
            <para>用于文本生成一些由用户或机器产生的持久数据存储</para>
            <para>默认存储文件为根目录下:default.json</para>
            </summary>
        </member>
        <member name="F:ECSharp.Utils.LocalStorage.jsonCache">
            <summary>
            json缓存
            </summary>
        </member>
        <member name="M:ECSharp.Utils.LocalStorage.GetAll">
            <summary>
            获取所有信息内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.LocalStorage.Get(System.String)">
            <summary>
            获取对应key值数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.LocalStorage.TryGet(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            获取对应key值数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.LocalStorage.Set(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            设置某个key值数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ECSharp.Utils.LocalStorage.WriteData(System.String,System.String,System.String)">
            <summary>
            写入数据
            </summary>
            <param name="data">数据内容</param>
            <param name="fileName">文件名和后缀类型，这里不需要带路径</param>
            <param name="path">路径[路径最后需要包含斜杠]，默认当前程序根目录</param>
        </member>
        <member name="M:ECSharp.Utils.LocalStorage.ReadData(System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="fileName">文件名和后缀类型，这里不需要带路径</param>
            <param name="path">路径[路径最后需要包含斜杠]，默认当前程序根目录</param>
        </member>
        <member name="T:ECSharp.Utils.Randomizer">
            <summary>
            随机器
            <para>用于生成指定长度的符号代码或者获取一个共享的随机器</para>
            <para>全局共享一个随机种子的随机器</para>
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer._rand">
            <summary>
            随机器
            </summary>
        </member>
        <member name="P:ECSharp.Utils.Randomizer.Random">
            <summary>
            随机器
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Utils.Randomizer.Reset(System.Int32)">
            <summary>
            重置随机器
            </summary>
            <param name="seed">随机种子</param>
        </member>
        <member name="T:ECSharp.Utils.Randomizer.RandomCodeType">
            <summary>
            随机字母类型
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer.RandomCodeType.HighLowLetterAndNumberAndSymbol">
            <summary>
            大小写字母和数字和符号
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer.RandomCodeType.HighLowLetterAndNumber">
            <summary>
            大小写字母和数字
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer.RandomCodeType.HighLetterAndNumber">
            <summary>
            大写字母和数字
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer.RandomCodeType.HighLetter">
            <summary>
            大写字母
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer.RandomCodeType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:ECSharp.Utils.Randomizer.symbols">
            <summary>
            符号库 大写小写字母数字特殊符号
            </summary>
        </member>
        <member name="M:ECSharp.Utils.Randomizer.Generate(System.Int32,ECSharp.Utils.Randomizer.RandomCodeType)">
            <summary>
            生成大小写字母和数字组合的字符串
            <para>默认随机为大小写和数字</para>
            </summary>
            <param name="len">生成长度</param>
            <param name="type">随机代码类型</param>
            <returns>生成的字符串</returns>
        </member>
        <member name="M:ECSharp.Utils.Randomizer.GenerateGuid(System.Boolean)">
            <summary>
            生成唯一Guid
            <para>默认无横线 格式为32个字符</para>
            </summary>
            <param name="hasLine">是否需要分段横线 默认无横线</param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Utils.SystemInfo">
            <summary>
            系统信息
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.SystemVersion">
            <summary>
            系统版本
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.DotNetVersion">
            <summary>
            DotNet版本
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.Path">
            <summary>
            当前执行路径
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.ProcessName">
            <summary>
            进程名称
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.ProcessVersion">
            <summary>
            进程版本
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.FrameVersion">
            <summary>
            框架版本
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.ProcessorCount">
            <summary>
            逻辑线程数
            </summary>
        </member>
        <member name="P:ECSharp.Utils.SystemInfo.TotalRunTime">
            <summary>
            程序总运行时间(毫秒)
            <para>实际时间是从调用框架功能开始计算</para>
            <para>内部使用 Stopwatch 类实现</para>
            </summary>
        </member>
        <member name="T:ECSharp.Variant.Var">
            <summary>
            可变变量
            <para>支持Object、VarList、VarMap和所有基础类型</para>
            </summary>
        </member>
        <member name="F:ECSharp.Variant.Var.stringValue">
            托管区
        </member>
        <member name="F:ECSharp.Variant.Var.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:ECSharp.Variant.Var.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:ECSharp.Variant.Var.Map">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:ECSharp.Variant.Var.boolValue">
            非托管区
        </member>
        <member name="F:ECSharp.Variant.Var.Type">
            属性区
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.Var.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.ValueType)">
            <summary>
            值类型变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Object)">
            <summary>
            对象变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Enum)">
            <summary>
            枚举可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Int32)">
            <summary>
            整型可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Int64)">
            <summary>
            长整型可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Single)">
            <summary>
            单精度浮点型可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Double)">
            <summary>
            双精度浮点型可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.Boolean)">
            <summary>
            布尔型可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(System.String)">
            <summary>
            可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(ECSharp.Variant.VarList)">
            <summary>
            可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.#ctor(ECSharp.Variant.VarMap)">
            <summary>
            可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.Enum)~ECSharp.Variant.Var">
            <summary>
            枚举值变量
            </summary>
            <param name="value">字节型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.Int32)~ECSharp.Variant.Var">
            <summary>
            整型变量
            </summary>
            <param name="value">整型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.Int64)~ECSharp.Variant.Var">
            <summary>
            长整型变量
            </summary>
            <param name="value">长整型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.Single)~ECSharp.Variant.Var">
            <summary>
            单精度浮点型变量
            </summary>
            <param name="value">单精度浮点型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.Double)~ECSharp.Variant.Var">
            <summary>
            双精度浮点型变量
            </summary>
            <param name="value">双精度浮点型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.Boolean)~ECSharp.Variant.Var">
            <summary>
            布尔型变量
            </summary>
            <param name="value">布尔型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(System.String)~ECSharp.Variant.Var">
            <summary>
            字符串型变量
            </summary>
            <param name="value">字符串型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.VarList)~ECSharp.Variant.Var">
            <summary>
            可变变量列表
            </summary>
            <param name="value">字符串型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.VarMap)~ECSharp.Variant.Var">
            <summary>
            可变变量字典
            </summary>
            <param name="value">字符串型变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.Var)~System.Int32">
            <summary>
            整型变量
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.Var)~System.Int64">
            <summary>
            长整型变量
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.Var)~System.Single">
            <summary>
            单精度浮点型变量
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.Var)~System.Double">
            <summary>
            双精度浮点型变量
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.Var)~System.Boolean">
            <summary>
            布尔型变量
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Implicit(ECSharp.Variant.Var)~System.String">
            <summary>
            字符串型变量
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.ToEnum``1">
            <summary>
            转枚举
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.IsNull">
            <summary>
            是否为空类型
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.IsNumber">
            <summary>
            是否为数字类型
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.IsString">
            <summary>
            是否为字符串类型
            </summary>
        </member>
        <member name="M:ECSharp.Variant.Var.GetBytes">
            <summary>
            转字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.Parse(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            通过字节转可变变量
            </summary>
            <param name="value">字节数组</param>
            <param name="startIndex">开始索引位</param>
            <param name="length">转化长度</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.Parse(System.Byte[],System.Int32@)">
            <summary>
            通过字节转可变变量
            </summary>
            <param name="value">字节数组</param>
            <param name="length">转化长度</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.Parse(System.Byte[],System.Int32)">
            <summary>
            通过字节转可变变量
            </summary>
            <param name="value">字节数组</param>
            <param name="startIndex">开始索引位</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.Parse(System.Byte[])">
            <summary>
            通过字节转可变变量
            </summary>
            <param name="value">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Addition(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Subtraction(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Multiply(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Division(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Modulus(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Increment(ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Decrement(ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_OnesComplement(ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="value">可变变量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_BitwiseAnd(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_BitwiseOr(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_ExclusiveOr(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_LeftShift(ECSharp.Variant.Var,System.Int32)">
            <summary>
            
            </summary>
            <param name="left">可变变量</param>
            <param name="right">位移量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_RightShift(ECSharp.Variant.Var,System.Int32)">
            <summary>
            
            </summary>
            <param name="left">可变变量</param>
            <param name="right">位移量</param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_LessThan(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_GreaterThan(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_LessThanOrEqual(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_GreaterThanOrEqual(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Equality(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:ECSharp.Variant.Var.op_Inequality(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:ECSharp.Variant.VarException">
            <summary>
            可变变量异常
            </summary>
        </member>
        <member name="M:ECSharp.Variant.VarException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ECSharp.Variant.VarList">
            <summary>
            可变变量列表
            </summary>
        </member>
        <member name="P:ECSharp.Variant.VarList.New">
            <summary>
            新建一个可变变量列表
            </summary>
        </member>
        <member name="P:ECSharp.Variant.VarList.Item(System.Int32)">
            <summary>
            根据索引安全获取值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Merge(ECSharp.Variant.VarList)">
            <summary>
            合并可变变量列表
            </summary>
            <param name="varlist"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Add(ECSharp.Variant.Var)">
            <summary>
            增加一个可变变量
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Add(ECSharp.Variant.Var[])">
            <summary>
            增加多个可变变量
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.op_Addition(ECSharp.Variant.VarList,ECSharp.Variant.VarList)">
            <summary>
            追加可变列表
            </summary>
            <param name="varlist"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.op_Addition(ECSharp.Variant.VarList,ECSharp.Variant.VarMap)">
            <summary>
            追加可变字典
            </summary>
            <param name="varlist"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.op_Addition(ECSharp.Variant.VarList,ECSharp.Variant.Var)">
            <summary>
            增加可变变量
            </summary>
            <param name="varlist"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.ToJson">
            <summary>
            转json对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Parse(Newtonsoft.Json.Linq.JArray)">
            <summary>
            转字典
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Parse(System.String)">
            <summary>
            转字典
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.TryParse(System.String,ECSharp.Variant.VarList@)">
            <summary>
            转字典
            </summary>
            <param name="json"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.GetBytes">
            <summary>
            获取字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Parse(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Parse(System.Byte[],System.Int32@)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Parse(System.Byte[],System.Int32)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.Parse(System.Byte[])">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.TryParse(System.Byte[],System.Int32,ECSharp.Variant.VarList@,System.Int32@)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="list"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.TryParse(System.Byte[],ECSharp.Variant.VarList@,System.Int32@)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="list"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.TryParse(System.Byte[],System.Int32,ECSharp.Variant.VarList@)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarList.TryParse(System.Byte[],ECSharp.Variant.VarList@)">
            <summary>
            转列表
            </summary>
            <param name="data"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Variant.VarMap">
            <summary>
            可变变量字典
            </summary>
        </member>
        <member name="P:ECSharp.Variant.VarMap.New">
            <summary>
            新建一个可变变量字典
            </summary>
        </member>
        <member name="P:ECSharp.Variant.VarMap.Item(ECSharp.Variant.Var)">
            <summary>
            根据键名安全获取键值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Merge(ECSharp.Variant.VarMap)">
            <summary>
            合并可变变量字典
            </summary>
            <param name="varmap"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Add(ECSharp.Variant.Var,ECSharp.Variant.Var)">
            <summary>
            增加一个可变变量对
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.ToJson">
            <summary>
            转Json对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Parse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            转字典
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Parse(System.String)">
            <summary>
            转字典
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.TryParse(System.String,ECSharp.Variant.VarMap@)">
            <summary>
            转字典
            </summary>
            <param name="json"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.GetBytes">
            <summary>
            获取字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Parse(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Parse(System.Byte[],System.Int32@)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Parse(System.Byte[],System.Int32)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.Parse(System.Byte[])">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.TryParse(System.Byte[],System.Int32,ECSharp.Variant.VarMap@,System.Int32@)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="map"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.TryParse(System.Byte[],ECSharp.Variant.VarMap@,System.Int32@)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="map"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.TryParse(System.Byte[],System.Int32,ECSharp.Variant.VarMap@)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ECSharp.Variant.VarMap.TryParse(System.Byte[],ECSharp.Variant.VarMap@)">
            <summary>
            转字典
            </summary>
            <param name="data"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Variant.VarObjectMgr">
            <summary>
            可变对象管理器
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarObjectMgr.varObjectTypePairs">
            <summary>
            通过字节转可变变量
            </summary>
        </member>
        <member name="M:ECSharp.Variant.VarObjectMgr.RegisterObjectType``1">
            <summary>
            注册对象类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ECSharp.Variant.VarObjectMgr.RegisterObjectType(System.Object)">
            <summary>
            注册对象类型
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ECSharp.Variant.VarObjectMgr.GetTypeByName(System.String)">
            <summary>
            通过名称获取类型
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ECSharp.Variant.VarType">
            <summary>
            可变变量类型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.NULL">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.BYTE">
            <summary>
            字节型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.SBYTE">
            <summary>
            有符号字节型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.INT16">
            <summary>
            短整型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.UINT16">
            <summary>
            无符号短整型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.INT32">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.UINT32">
            <summary>
            无符号整型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.INT64">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.UINT64">
            <summary>
            无符号长整型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.FLOAT">
            <summary>
            单精度浮点型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.DOUBLE">
            <summary>
            双精度浮点型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.BOOL">
            <summary>
            布尔型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.STRING">
            <summary>
            字符串型
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.VARLIST">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.VARMAP">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.STRUCT">
            <summary>
            结构体
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.VARMAP_HEAD">
            <summary>
            值字典 头
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.VARMAP_END">
            <summary>
            值字典 结尾
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.VARLIST_HEAD">
            <summary>
            值列表 头
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.VARLIST_END">
            <summary>
            值列表 结尾
            </summary>
        </member>
        <member name="F:ECSharp.Variant.VarType.OBJECT">
            <summary>
            对象
            </summary>
        </member>
    </members>
</doc>
